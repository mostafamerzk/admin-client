{"version":3,"file":"static/js/765.b573ebce.chunk.js","mappings":"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","sources":["hooks/useErrorHandler.ts","components/common/withErrorBoundary.tsx","pages/LoginPage.tsx","utils/validation.ts","components/common/Button.tsx"],"sourcesContent":["/**\n * Error Handler Hook\n * \n * This hook provides React-specific error handling utilities and state management.\n */\n\nimport { useState, useCallback } from 'react';\nimport { \n  handleApiError, \n  handleValidationError, \n  handleFormError,\n  logError,\n  reportError,\n  type ApiError,\n  type ValidationError \n} from '../utils/errorHandling';\nimport useNotification from './useNotification';\n\ninterface ErrorState {\n  hasError: boolean;\n  error: Error | ApiError | ValidationError | null;\n  errorType: 'api' | 'validation' | 'form' | 'general' | null;\n  context?: string;\n}\n\ninterface UseErrorHandlerOptions {\n  enableNotifications?: boolean;\n  enableReporting?: boolean;\n  onError?: (error: any, context?: string) => void;\n}\n\nexport const useErrorHandler = (options: UseErrorHandlerOptions = {}) => {\n  const { enableNotifications = true, enableReporting = true, onError } = options;\n  const { showNotification } = useNotification();\n  \n  const [errorState, setErrorState] = useState<ErrorState>({\n    hasError: false,\n    error: null,\n    errorType: null\n  });\n\n  // Clear error state\n  const clearError = useCallback(() => {\n    setErrorState({\n      hasError: false,\n      error: null,\n      errorType: null\n    });\n  }, []);\n\n  // Handle API errors\n  const handleApiErrorWithState = useCallback((error: any, context?: string) => {\n    const apiError = handleApiError(\n      error,\n      enableNotifications ? (notification: { type: string; title: string; message: string }) => {\n        showNotification({\n          type: notification.type as 'error' | 'success' | 'warning' | 'info',\n          title: notification.title,\n          message: notification.message\n        });\n      } : undefined\n    );\n\n    setErrorState({\n      hasError: true,\n      error: apiError,\n      errorType: 'api',\n      ...(context && { context })\n    });\n\n    if (enableReporting && error instanceof Error) {\n      reportError(error, context);\n    }\n\n    if (onError) {\n      onError(error, context);\n    }\n\n    return apiError;\n  }, [enableNotifications, enableReporting, showNotification, onError]);\n\n  // Handle validation errors\n  const handleValidationErrorWithState = useCallback((\n    field: string,\n    message: string,\n    code?: string,\n    context?: string\n  ) => {\n    const validationError = handleValidationError(field, message, code);\n\n    setErrorState({\n      hasError: true,\n      error: validationError,\n      errorType: 'validation',\n      ...(context && { context })\n    });\n\n    if (enableNotifications) {\n      showNotification({\n        type: 'error',\n        title: 'Validation Error',\n        message: validationError.message\n      });\n    }\n\n    if (onError) {\n      onError(validationError, context);\n    }\n\n    return validationError;\n  }, [enableNotifications, showNotification, onError]);\n\n  // Handle form errors\n  const handleFormErrorWithState = useCallback((\n    error: any,\n    setFieldError?: (field: string, message: string) => void,\n    context?: string\n  ) => {\n    handleFormError(\n      error,\n      setFieldError,\n      enableNotifications ? (notification: { type: string; title: string; message: string }) => {\n        showNotification({\n          type: notification.type as 'error' | 'success' | 'warning' | 'info',\n          title: notification.title,\n          message: notification.message\n        });\n      } : undefined\n    );\n\n    setErrorState({\n      hasError: true,\n      error,\n      errorType: 'form',\n      ...(context && { context })\n    });\n\n    if (enableReporting && error instanceof Error) {\n      reportError(error, context);\n    }\n\n    if (onError) {\n      onError(error, context);\n    }\n  }, [enableNotifications, enableReporting, showNotification, onError]);\n\n  // Handle general errors\n  const handleGeneralError = useCallback((error: any, context?: string) => {\n    const errorObj = error instanceof Error ? error : new Error(String(error));\n\n    setErrorState({\n      hasError: true,\n      error: errorObj,\n      errorType: 'general',\n      ...(context && { context })\n    });\n\n    if (enableNotifications) {\n      showNotification({\n        type: 'error',\n        title: 'Error',\n        message: errorObj.message\n      });\n    }\n\n    if (enableReporting) {\n      reportError(errorObj, context);\n    }\n\n    logError(errorObj, context);\n\n    if (onError) {\n      onError(error, context);\n    }\n\n    return errorObj;\n  }, [enableNotifications, enableReporting, showNotification, onError]);\n\n  // Async operation wrapper with error handling\n  const withErrorHandling = useCallback(async <T>(\n    operation: () => Promise<T>,\n    context?: string\n  ): Promise<T | null> => {\n    try {\n      clearError();\n      return await operation();\n    } catch (error) {\n      handleApiErrorWithState(error, context);\n      return null;\n    }\n  }, [clearError, handleApiErrorWithState]);\n\n  // Form submission wrapper with error handling\n  const withFormErrorHandling = useCallback(async <T>(\n    operation: () => Promise<T>,\n    setFieldError?: (field: string, message: string) => void,\n    context?: string\n  ): Promise<T | null> => {\n    try {\n      clearError();\n      return await operation();\n    } catch (error) {\n      handleFormErrorWithState(error, setFieldError, context);\n      return null;\n    }\n  }, [clearError, handleFormErrorWithState]);\n\n  return {\n    // Error state\n    ...errorState,\n    \n    // Error handlers\n    handleApiError: handleApiErrorWithState,\n    handleValidationError: handleValidationErrorWithState,\n    handleFormError: handleFormErrorWithState,\n    handleGeneralError,\n    clearError,\n    \n    // Wrapper functions\n    withErrorHandling,\n    withFormErrorHandling,\n    \n    // Utility functions\n    isApiError: (error: any): error is ApiError => \n      error && typeof error === 'object' && 'status' in error,\n    isValidationError: (error: any): error is ValidationError => \n      error && typeof error === 'object' && 'field' in error,\n  };\n};\n\nexport default useErrorHandler;\n","/**\n * Higher-Order Component for Error Boundary\n * \n * This HOC wraps components with an error boundary to catch and handle errors gracefully.\n */\n\nimport React, { ComponentType, forwardRef } from 'react';\nimport ErrorBoundary from './ErrorBoundary';\nimport { reportError } from '../../utils/errorHandling';\n\ninterface ErrorBoundaryConfig {\n  fallback?: React.ComponentType<{ error: Error; resetError: () => void }>;\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;\n  enableReporting?: boolean;\n  context?: string;\n}\n\n/**\n * Default error fallback component\n */\nconst DefaultErrorFallback: React.FC<{ error: Error; resetError: () => void }> = ({ \n  error, \n  resetError \n}) => (\n  <div className=\"flex flex-col items-center justify-center min-h-[200px] p-4 border border-red-200 rounded-lg bg-red-50\">\n    <div className=\"text-red-500 text-2xl mb-2\">⚠️</div>\n    <h3 className=\"text-lg font-semibold text-red-800 mb-2\">Something went wrong</h3>\n    <p className=\"text-red-600 text-sm mb-4 text-center max-w-md\">\n      {error.message || 'An unexpected error occurred'}\n    </p>\n    <button\n      onClick={resetError}\n      className=\"px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n    >\n      Try Again\n    </button>\n  </div>\n);\n\n/**\n * Higher-order component that wraps a component with an error boundary\n */\nexport function withErrorBoundary<P extends object>(\n  Component: ComponentType<P>,\n  config: ErrorBoundaryConfig = {}\n) {\n  const {\n    fallback: FallbackComponent = DefaultErrorFallback,\n    onError,\n    enableReporting = true,\n    context\n  } = config;\n\n  const WrappedComponent = forwardRef<any, P>((props, ref) => {\n    const handleError = (error: Error, errorInfo: React.ErrorInfo) => {\n      // Report error if enabled\n      if (enableReporting) {\n        reportError(error, context || Component.displayName || Component.name, {\n          componentStack: errorInfo.componentStack,\n          errorBoundary: true\n        });\n      }\n\n      // Call custom error handler if provided\n      if (onError) {\n        onError(error, errorInfo);\n      }\n    };\n\n    return (\n      <ErrorBoundary\n        fallback={<FallbackComponent error={new Error()} resetError={() => window.location.reload()} />}\n        onError={handleError}\n      >\n        <Component {...(props as any)} ref={ref} />\n      </ErrorBoundary>\n    );\n  });\n\n  // Set display name for debugging\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\n\n  return WrappedComponent;\n}\n\n/**\n * Hook for creating error boundary configuration\n */\nexport const useErrorBoundaryConfig = (\n  onError?: (error: Error, errorInfo: React.ErrorInfo) => void,\n  fallback?: React.ComponentType<{ error: Error; resetError: () => void }>,\n  context?: string\n): ErrorBoundaryConfig => {\n  return {\n    ...(onError && { onError }),\n    ...(fallback && { fallback }),\n    ...(context && { context }),\n    enableReporting: true\n  };\n};\n\n/**\n * Decorator for class components\n */\nexport const errorBoundary = (config: ErrorBoundaryConfig = {}) => {\n  return <P extends object>(Component: ComponentType<P>) => {\n    return withErrorBoundary(Component, config);\n  };\n};\n\nexport default withErrorBoundary;\n","/**\n * LoginPage Component\n *\n * The login page for the ConnectChain admin panel.\n */\n\nimport React, { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport useAuth from '../hooks/useAuth';\nimport useNotification from '../hooks/useNotification';\nimport Button from '../components/common/Button';\nimport { ROUTES } from '../constants/routes';\nimport { mockDb } from '../mockData/db';\nimport { validateForm, validationRules } from '../utils/validation';\nimport useErrorHandler from '../hooks/useErrorHandler';\nimport { safeLocalStorage } from '../utils/errorHandling';\nimport withErrorBoundary from '../components/common/withErrorBoundary';\n\ninterface LocationState {\n  from?: {\n    pathname?: string;\n  };\n}\n\nconst LoginPage: React.FC = () => {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    rememberMe: false\n  });\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const { showError, showSuccess } = useNotification();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Error handling\n  const {\n    handleFormError,\n    withFormErrorHandling,\n    clearError\n  } = useErrorHandler({\n    enableNotifications: true,\n    enableReporting: true\n  });\n\n  const locationState = location.state as LocationState;\n  const from = locationState?.from?.pathname || ROUTES.DASHBOARD;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n\n    // Clear error when field is edited\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    clearError();\n\n    // Validate form\n    const validationErrors = validateForm({\n      email: formData.email,\n      password: formData.password\n    }, {\n      email: [validationRules.required(), validationRules.email()],\n      password: [validationRules.required()]\n    });\n\n    if (Object.keys(validationErrors).length > 0) {\n      setErrors(validationErrors);\n      return;\n    }\n\n    setIsLoading(true);\n\n    const result = await withFormErrorHandling(async () => {\n      await login({\n        email: formData.email,\n        password: formData.password,\n        rememberMe: formData.rememberMe\n      });\n\n      showSuccess('Login successful');\n      navigate(from, { replace: true });\n      return true;\n    }, (field, message) => {\n      setErrors(prev => ({ ...prev, [field]: message }));\n    }, 'User Login');\n\n    setIsLoading(false);\n\n    if (!result) {\n      console.error('Login failed');\n    }\n  };\n\n  // Reset the mock database (for development troubleshooting)\n  const handleResetMockDb = () => {\n    const success = safeLocalStorage.removeItem('mock_db_users');\n    const success2 = safeLocalStorage.removeItem('mock_db_suppliers');\n    const success3 = safeLocalStorage.removeItem('mock_db_categories');\n    const success4 = safeLocalStorage.removeItem('mock_db_orders');\n\n    if (success && success2 && success3 && success4) {\n      try {\n        mockDb.forceReset();\n        showSuccess('Mock database has been reset. Please try logging in again.');\n        // Clear form\n        setFormData({\n          email: '',\n          password: '',\n          rememberMe: false\n        });\n        setErrors({});\n        clearError();\n      } catch (error) {\n        handleFormError(error, (field, message) => {\n          setErrors(prev => ({ ...prev, [field]: message }));\n        });\n      }\n    } else {\n      showError('Failed to reset mock database - localStorage error');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h1 className=\"text-center text-3xl font-bold bg-gradient-to-r from-primary to-orange-500 bg-clip-text text-transparent\">\n            ConnectChain\n          </h1>\n          <h2 className=\"mt-6 text-center text-2xl font-bold text-gray-800\">\n            Admin Panel\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            Sign in to your account to access the admin dashboard\n          </p>\n        </div>\n\n        <div className=\"mt-8 bg-white py-8 px-4 shadow-lg sm:rounded-lg sm:px-10 border border-gray-100\">\n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                Email address\n              </label>\n              <div className=\"mt-1\">\n                <input\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  required\n                  value={formData['email']}\n                  onChange={handleChange}\n                  className={`appearance-none block w-full px-3 py-2 border ${errors['email'] ? 'border-red-300' : 'border-gray-300'} rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm`}\n                  placeholder=\"admin@connectchain.com\"\n                />\n                {errors['email'] && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors['email']}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                Password\n              </label>\n              <div className=\"mt-1\">\n                <input\n                  id=\"password\"\n                  name=\"password\"\n                  type=\"password\"\n                  autoComplete=\"current-password\"\n                  required\n                  value={formData['password']}\n                  onChange={handleChange}\n                  className={`appearance-none block w-full px-3 py-2 border ${errors['password'] ? 'border-red-300' : 'border-gray-300'} rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm`}\n                  placeholder=\"••••••••\"\n                />\n                {errors['password'] && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors['password']}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <input\n                  id=\"rememberMe\"\n                  name=\"rememberMe\"\n                  type=\"checkbox\"\n                  checked={formData.rememberMe}\n                  onChange={handleChange}\n                  className=\"h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                />\n                <label htmlFor=\"rememberMe\" className=\"ml-2 block text-sm text-gray-700\">\n                  Remember me\n                </label>\n              </div>\n\n              <div className=\"text-sm\">\n                <a href=\"#\" className=\"font-medium text-primary hover:text-primary-dark\">\n                  Forgot your password?\n                </a>\n              </div>\n            </div>\n\n            <div>\n              <Button\n                type=\"submit\"\n                variant=\"primary\"\n                fullWidth\n                size=\"lg\"\n                loading={isLoading}\n                disabled={isLoading}\n              >\n                Sign in\n              </Button>\n            </div>\n          </form>\n\n          <div className=\"mt-6\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-300\" />\n              </div>\n              <div className=\"relative flex justify-center text-sm\">\n                <span className=\"px-2 bg-white text-gray-500\">Demo Credentials</span>\n              </div>\n            </div>\n\n            <div className=\"mt-6 grid grid-cols-1 gap-3\">\n              <div className=\"text-sm text-center text-gray-600\">\n                <p>Email: <span className=\"font-medium\">admin@connectchain.com</span></p>\n                <p>Password: <span className=\"font-medium\">password123</span></p>\n              </div>\n\n              <div className=\"mt-4 text-center\">\n                <button\n                  type=\"button\"\n                  onClick={handleResetMockDb}\n                  className=\"text-xs text-primary hover:text-primary-dark underline\"\n                >\n                  Reset Mock Database\n                </button>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  If you're having trouble logging in, try resetting the mock database.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Wrap with error boundary\nexport default withErrorBoundary(LoginPage, {\n  fallback: ({ error, resetError }) => (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"text-red-500 text-4xl mb-4\">🔐</div>\n          <h2 className=\"text-xl font-semibold mb-2\">Login Page Error</h2>\n          <p className=\"text-gray-600 mb-4\">\n            {error.message || 'An error occurred while loading the login page'}\n          </p>\n          <button\n            onClick={resetError}\n            className=\"px-4 py-2 bg-primary text-white rounded hover:bg-primary-dark transition-colors\"\n          >\n            Reload Page\n          </button>\n        </div>\n      </div>\n    </div>\n  ),\n  context: 'LoginPage'\n});\n","/**\n * Validation Utilities\n * \n * This file provides a comprehensive form validation utility with both function-based\n * and rule-based validation approaches.\n */\n\n// Type definitions\nexport type ValidationRule = {\n  validator: (value: any, formData?: any) => boolean;\n  message: string;\n};\n\nexport type ValidationRules = Record<string, ValidationRule | ValidationRule[]>;\n\n// Individual validation functions\nexport const isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return emailRegex.test(email);\n};\n\nexport const isValidPhone = (phone: string): boolean => {\n  const phoneRegex = /^\\+?[0-9]{10,15}$/;\n  return phoneRegex.test(phone);\n};\n\nexport const isValidUrl = (url: string): boolean => {\n  try {\n    new URL(url);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const isRequired = (value: any): boolean => {\n  if (value === null || value === undefined) return false;\n  if (typeof value === 'string') return value.trim().length > 0;\n  if (Array.isArray(value)) return value.length > 0;\n  return true;\n};\n\nexport const minLength = (value: string, min: number): boolean => {\n  return value.length >= min;\n};\n\nexport const maxLength = (value: string, max: number): boolean => {\n  return value.length <= max;\n};\n\nexport const isNumeric = (value: string): boolean => {\n  return /^[0-9]+$/.test(value);\n};\n\nexport const isDecimal = (value: string): boolean => {\n  return /^[0-9]+(\\.[0-9]+)?$/.test(value);\n};\n\nexport const isAlphanumeric = (value: string): boolean => {\n  return /^[a-zA-Z0-9]+$/.test(value);\n};\n\nexport const isValidDate = (dateString: string): boolean => {\n  const date = new Date(dateString);\n  return !isNaN(date.getTime());\n};\n\nexport const doPasswordsMatch = (password: string, confirmPassword: string): boolean => {\n  return password === confirmPassword;\n};\n\nexport const isStrongPassword = (password: string): boolean => {\n  // Password must be at least 8 characters long\n  if (password.length < 8) return false;\n  \n  // Password must contain at least one uppercase letter\n  if (!/[A-Z]/.test(password)) return false;\n  \n  // Password must contain at least one lowercase letter\n  if (!/[a-z]/.test(password)) return false;\n  \n  // Password must contain at least one number\n  if (!/[0-9]/.test(password)) return false;\n  \n  // Password must contain at least one special character\n  if (!/[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/.test(password)) return false;\n  \n  return true;\n};\n\n// Field validation\nexport const validateField = (\n  _name: string,\n  value: any,\n  rules: ValidationRule | ValidationRule[],\n  formData?: any\n): string => {\n  const ruleArray = Array.isArray(rules) ? rules : [rules];\n  \n  for (const rule of ruleArray) {\n    if (!rule.validator(value, formData)) {\n      return rule.message;\n    }\n  }\n  \n  return '';\n};\n\n// Form validation\nexport const validateForm = <T extends Record<string, any>>(\n  values: T,\n  validationRules: ValidationRules\n): Partial<Record<keyof T, string>> => {\n  const errors: Partial<Record<keyof T, string>> = {};\n  \n  Object.entries(validationRules).forEach(([fieldName, rules]) => {\n    const key = fieldName as keyof T;\n    const error = validateField(fieldName, values[key], rules, values);\n    if (error) {\n      errors[key] = error;\n    }\n  });\n  \n  return errors;\n};\n\n// Common validation rules\nexport const validationRules = {\n  required: (message: string = 'This field is required'): ValidationRule => ({\n    validator: isRequired,\n    message\n  }),\n  \n  email: (message: string = 'Please enter a valid email address'): ValidationRule => ({\n    validator: isValidEmail,\n    message\n  }),\n  \n  phone: (message: string = 'Please enter a valid phone number'): ValidationRule => ({\n    validator: isValidPhone,\n    message\n  }),\n  \n  url: (message: string = 'Please enter a valid URL'): ValidationRule => ({\n    validator: isValidUrl,\n    message\n  }),\n  \n  minLength: (min: number, message?: string): ValidationRule => ({\n    validator: (value: string) => minLength(value, min),\n    message: message || `Must be at least ${min} characters`\n  }),\n  \n  maxLength: (max: number, message?: string): ValidationRule => ({\n    validator: (value: string) => maxLength(value, max),\n    message: message || `Must be no more than ${max} characters`\n  }),\n  \n  numeric: (message: string = 'Please enter a numeric value'): ValidationRule => ({\n    validator: isNumeric,\n    message\n  }),\n  \n  decimal: (message: string = 'Please enter a valid decimal number'): ValidationRule => ({\n    validator: isDecimal,\n    message\n  }),\n  \n  alphanumeric: (message: string = 'Please use only letters and numbers'): ValidationRule => ({\n    validator: isAlphanumeric,\n    message\n  }),\n  \n  date: (message: string = 'Please enter a valid date'): ValidationRule => ({\n    validator: isValidDate,\n    message\n  }),\n  \n  password: (message: string = 'Password must be at least 8 characters and include uppercase, lowercase, number, and special character'): ValidationRule => ({\n    validator: isStrongPassword,\n    message\n  }),\n  \n  passwordMatch: (message: string = 'Passwords do not match'): ValidationRule => ({\n    validator: (value: string, formData?: any) => doPasswordsMatch(value, formData?.confirmPassword),\n    message\n  }),\n  \n  confirmPasswordMatch: (message: string = 'Passwords do not match'): ValidationRule => ({\n    validator: (value: string, formData?: any) => doPasswordsMatch(value, formData?.password),\n    message\n  })\n};\n\n","/**\n * Button Component\n * \n * A reusable button component with various styles and states.\n */\n\nimport React, { memo } from 'react';\nimport type { ReactNode } from 'react';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'danger' | 'success' | 'text' | 'link';\nexport type ButtonSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\nexport interface ButtonProps {\n  children: ReactNode;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  className?: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  type?: 'button' | 'submit' | 'reset';\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  loading?: boolean;\n  rounded?: boolean;\n  href?: string;\n  target?: string;\n  rel?: string;\n  title?: string;\n  ariaLabel?: string;\n  testId?: string;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  children,\n  variant = 'primary',\n  size = 'md',\n  className = '',\n  onClick,\n  disabled = false,\n  type = 'button',\n  icon,\n  iconPosition = 'left',\n  fullWidth = false,\n  loading = false,\n  rounded = false,\n  href,\n  target,\n  rel,\n  title,\n  ariaLabel,\n  testId,\n}) => {\n  const baseClasses = 'inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';\n  \n  const variantClasses = {\n    primary: 'bg-primary text-white hover:bg-primary/90 focus:ring-primary',\n    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-300',\n    outline: 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-primary',\n    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',\n    success: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500',\n    text: 'bg-transparent text-primary hover:bg-gray-100 focus:ring-primary',\n    link: 'bg-transparent text-primary hover:underline focus:ring-transparent p-0',\n  };\n  \n  const sizeClasses = {\n    xs: 'text-xs px-2 py-1',\n    sm: 'text-xs px-3 py-1.5',\n    md: 'text-sm px-4 py-2',\n    lg: 'text-base px-5 py-2.5',\n    xl: 'text-lg px-6 py-3',\n  };\n  \n  const disabledClasses = disabled ? 'opacity-60 cursor-not-allowed' : 'cursor-pointer';\n  const widthClass = fullWidth ? 'w-full' : '';\n  const roundedClass = rounded ? 'rounded-full' : 'rounded-lg';\n  \n  const buttonClasses = `\n    ${baseClasses}\n    ${variantClasses[variant]}\n    ${sizeClasses[size]}\n    ${disabledClasses}\n    ${widthClass}\n    ${roundedClass}\n    ${className}\n  `;\n  \n  const content = (\n    <>\n      {loading && (\n        <svg \n          className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-current\" \n          xmlns=\"http://www.w3.org/2000/svg\" \n          fill=\"none\" \n          viewBox=\"0 0 24 24\"\n          aria-hidden=\"true\"\n        >\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n        </svg>\n      )}\n      \n      {icon && iconPosition === 'left' && !loading && (\n        <span className=\"mr-2\">{icon}</span>\n      )}\n      \n      {children}\n      \n      {icon && iconPosition === 'right' && (\n        <span className=\"ml-2\">{icon}</span>\n      )}\n    </>\n  );\n  \n  // If href is provided, render an anchor tag\n  if (href) {\n    return (\n      <a\n        href={href}\n        className={buttonClasses}\n        target={target}\n        rel={rel || (target === '_blank' ? 'noopener noreferrer' : undefined)}\n        onClick={onClick}\n        title={title}\n        aria-label={ariaLabel}\n        data-testid={testId}\n      >\n        {content}\n      </a>\n    );\n  }\n  \n  // Otherwise render a button\n  return (\n    <button\n      type={type}\n      className={buttonClasses}\n      onClick={onClick}\n      disabled={disabled || loading}\n      title={title}\n      aria-label={ariaLabel}\n      data-testid={testId}\n    >\n      {content}\n    </button>\n  );\n};\n\nexport default memo(Button);\n"],"names":["options","arguments","length","undefined","enableNotifications","enableReporting","onError","showNotification","useNotification","errorState","setErrorState","useState","hasError","error","errorType","clearError","useCallback","handleApiErrorWithState","context","apiError","handleApiError","notification","type","title","message","Error","reportError","handleValidationErrorWithState","field","code","validationError","handleValidationError","handleFormErrorWithState","setFieldError","handleFormError","handleGeneralError","errorObj","String","logError","withErrorHandling","async","operation","withFormErrorHandling","isApiError","isValidationError","DefaultErrorFallback","_ref","resetError","_jsxs","className","children","_jsx","onClick","withErrorBoundary","Component","config","fallback","FallbackComponent","WrappedComponent","forwardRef","props","ref","ErrorBoundary","window","location","reload","handleError","errorInfo","displayName","name","componentStack","errorBoundary","LoginPage","_locationState$from","formData","setFormData","email","password","rememberMe","errors","setErrors","isLoading","setIsLoading","login","useAuth","showError","showSuccess","navigate","useNavigate","useLocation","useErrorHandler","locationState","state","from","pathname","ROUTES","DASHBOARD","handleChange","e","value","checked","target","prev","onSubmit","preventDefault","validationErrors","validateForm","validationRules","required","Object","keys","result","replace","console","htmlFor","id","autoComplete","onChange","placeholder","href","Button","variant","fullWidth","size","loading","disabled","handleResetMockDb","success","safeLocalStorage","removeItem","success2","success3","success4","mockDb","forceReset","isValidEmail","test","isValidPhone","phone","isValidUrl","url","URL","isRequired","trim","Array","isArray","isNumeric","isDecimal","isAlphanumeric","isValidDate","dateString","date","Date","isNaN","getTime","doPasswordsMatch","confirmPassword","isStrongPassword","values","entries","forEach","fieldName","rules","key","validateField","_name","ruleArray","rule","validator","minLength","min","maxLength","max","numeric","decimal","alphanumeric","passwordMatch","confirmPasswordMatch","icon","iconPosition","rounded","rel","ariaLabel","testId","buttonClasses","primary","secondary","outline","danger","text","link","xs","sm","md","lg","xl","content","_Fragment","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","memo"],"sourceRoot":""}