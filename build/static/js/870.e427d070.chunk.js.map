{"version":3,"file":"static/js/870.e427d070.chunk.js","mappings":"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","sources":["components/common/MigrationNotice.tsx","features/settings/components/SettingsSidebar.tsx","features/settings/components/GeneralSettingsForm.tsx","features/settings/components/SecuritySettingsForm.tsx","features/settings/components/ApiSettingsForm.tsx","features/settings/components/BillingSettingsForm.tsx","features/settings/api/settingsApi.ts","pages/SettingsPage.tsx","components/layout/PageHeader.tsx","components/common/Card.tsx","../node_modules/@heroicons/react/24/outline/esm/ChevronRightIcon.js","components/common/Button.tsx"],"sourcesContent":["/**\n * Migration Notice Component\n * \n * A reusable component for displaying migration notices to users.\n */\n\nimport React from 'react';\nimport { InformationCircleIcon, XMarkIcon } from '@heroicons/react/24/outline';\nimport { Link } from 'react-router-dom';\n\ninterface MigrationNoticeProps {\n  title: string;\n  message: string;\n  actionText?: string;\n  actionLink?: string;\n  onDismiss?: () => void;\n  type?: 'info' | 'warning' | 'success';\n  className?: string;\n}\n\nconst MigrationNotice: React.FC<MigrationNoticeProps> = ({\n  title,\n  message,\n  actionText,\n  actionLink,\n  onDismiss,\n  type = 'info',\n  className = ''\n}) => {\n  const typeClasses = {\n    info: 'bg-blue-50 border-blue-200 text-blue-800',\n    warning: 'bg-yellow-50 border-yellow-200 text-yellow-800',\n    success: 'bg-green-50 border-green-200 text-green-800'\n  };\n\n  const iconClasses = {\n    info: 'text-blue-400',\n    warning: 'text-yellow-400',\n    success: 'text-green-400'\n  };\n\n  return (\n    <div className={`border rounded-lg p-4 ${typeClasses[type]} ${className}`}>\n      <div className=\"flex\">\n        <div className=\"flex-shrink-0\">\n          <InformationCircleIcon className={`h-5 w-5 ${iconClasses[type]}`} aria-hidden=\"true\" />\n        </div>\n        <div className=\"ml-3 flex-1\">\n          <h3 className=\"text-sm font-medium\">{title}</h3>\n          <div className=\"mt-2 text-sm\">\n            <p>{message}</p>\n          </div>\n          {actionText && actionLink && (\n            <div className=\"mt-3\">\n              <Link\n                to={actionLink}\n                className=\"text-sm font-medium underline hover:no-underline\"\n              >\n                {actionText}\n              </Link>\n            </div>\n          )}\n        </div>\n        {onDismiss && (\n          <div className=\"ml-auto pl-3\">\n            <div className=\"-mx-1.5 -my-1.5\">\n              <button\n                type=\"button\"\n                className={`inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n                  type === 'info' ? 'text-blue-500 hover:bg-blue-100 focus:ring-blue-600' :\n                  type === 'warning' ? 'text-yellow-500 hover:bg-yellow-100 focus:ring-yellow-600' :\n                  'text-green-500 hover:bg-green-100 focus:ring-green-600'\n                }`}\n                onClick={onDismiss}\n              >\n                <span className=\"sr-only\">Dismiss</span>\n                <XMarkIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MigrationNotice;\n","/**\n * Settings Sidebar Component\n * \n * This component displays the sidebar navigation for the settings page.\n */\n\nimport React from 'react';\nimport { SettingsTab } from '../types/index';\nimport Card from '../../../components/common/Card';\n\ninterface SettingsSidebarProps {\n  activeTab: SettingsTab;\n  onTabChange: (tab: SettingsTab) => void;\n}\n\nconst SettingsSidebar: React.FC<SettingsSidebarProps> = ({\n  activeTab,\n  onTabChange\n}) => {\n  const tabs = [\n    {\n      id: 'general',\n      label: 'General Settings'\n    },\n    {\n      id: 'security',\n      label: 'Security'\n    },\n    {\n      id: 'api',\n      label: 'API Keys'\n    },\n    {\n      id: 'billing',\n      label: 'Billing'\n    }\n  ];\n\n  return (\n    <Card noPadding>\n      <ul className=\"divide-y divide-gray-100\">\n        {tabs.map((tab) => (\n          <li key={tab.id}>\n            <button\n              className={`w-full text-left px-4 py-3 ${\n                activeTab === tab.id ? 'bg-primary bg-opacity-5 text-primary font-medium' : 'text-gray-700 hover:bg-gray-50'\n              }`}\n              onClick={() => onTabChange(tab.id as SettingsTab)}\n            >\n              {tab.label}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </Card>\n  );\n};\n\nexport default SettingsSidebar;\n","/**\n * General Settings Form Component\n * \n * This component displays and allows editing of general settings.\n */\n\nimport React from 'react';\nimport { GeneralSettings } from '../types/index';\nimport Button from '../../../components/common/Button';\n\ninterface GeneralSettingsFormProps {\n  settings: GeneralSettings;\n  onSave: () => void;\n  onChange: (field: keyof GeneralSettings, value: string) => void;\n}\n\nconst GeneralSettingsForm: React.FC<GeneralSettingsFormProps> = ({\n  settings,\n  onSave,\n  onChange\n}) => {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <label className=\"block text-sm font-medium text-gray-700\">\n          Platform Name\n        </label>\n        <input\n          type=\"text\"\n          className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n          value={settings.platformName}\n          onChange={(e) => onChange('platformName', e.target.value)}\n        />\n      </div>\n      \n      <div>\n        <label className=\"block text-sm font-medium text-gray-700\">\n          Contact Email\n        </label>\n        <input\n          type=\"email\"\n          className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n          value={settings.contactEmail}\n          onChange={(e) => onChange('contactEmail', e.target.value)}\n        />\n      </div>\n      \n      <div>\n        <label className=\"block text-sm font-medium text-gray-700\">\n          Default Language\n        </label>\n        <select\n          className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n          value={settings.defaultLanguage}\n          onChange={(e) => onChange('defaultLanguage', e.target.value)}\n        >\n          <option value=\"en\">English</option>\n          <option value=\"es\">Spanish</option>\n          <option value=\"fr\">French</option>\n          <option value=\"de\">German</option>\n        </select>\n      </div>\n      \n      <div>\n        <label className=\"block text-sm font-medium text-gray-700\">\n          Timezone\n        </label>\n        <select\n          className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n          value={settings.timezone}\n          onChange={(e) => onChange('timezone', e.target.value)}\n        >\n          <option value=\"UTC\">UTC</option>\n          <option value=\"EST\">Eastern Time (EST)</option>\n          <option value=\"CST\">Central Time (CST)</option>\n          <option value=\"PST\">Pacific Time (PST)</option>\n        </select>\n      </div>\n      \n      <div className=\"flex justify-end\">\n        <Button variant=\"primary\" onClick={onSave}>\n          Save Changes\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default GeneralSettingsForm;\n","/**\n * Security Settings Form Component\n * \n * This component displays and allows editing of security settings.\n */\n\nimport React from 'react';\nimport { SecuritySettings } from '../types/index';\nimport Button from '../../../components/common/Button';\n\ninterface SecuritySettingsFormProps {\n  settings: SecuritySettings;\n  onSave: () => void;\n  onToggleTwoFactor: () => void;\n  onPasswordChange: (field: 'currentPassword' | 'newPassword' | 'confirmPassword', value: string) => void;\n}\n\nconst SecuritySettingsForm: React.FC<SecuritySettingsFormProps> = ({\n  settings,\n  onSave,\n  onToggleTwoFactor,\n  onPasswordChange\n}) => {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-medium text-gray-800\">Change Password</h3>\n        <div className=\"mt-4 space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Current Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n              value={settings.currentPassword || ''}\n              onChange={(e) => onPasswordChange('currentPassword', e.target.value)}\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              New Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n              value={settings.newPassword || ''}\n              onChange={(e) => onPasswordChange('newPassword', e.target.value)}\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700\">\n              Confirm New Password\n            </label>\n            <input\n              type=\"password\"\n              className=\"mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm\"\n              value={settings.confirmPassword || ''}\n              onChange={(e) => onPasswordChange('confirmPassword', e.target.value)}\n            />\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"pt-4 border-t border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-800\">Two-Factor Authentication</h3>\n        <div className=\"mt-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-700\">Protect your account with two-factor authentication</p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                {settings.twoFactorEnabled ? 'Currently enabled' : 'Currently disabled'}\n              </p>\n            </div>\n            <Button \n              variant=\"outline\"\n              onClick={onToggleTwoFactor}\n            >\n              {settings.twoFactorEnabled ? 'Disable' : 'Enable'}\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex justify-end\">\n        <Button variant=\"primary\" onClick={onSave}>\n          Save Changes\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default SecuritySettingsForm;\n","/**\n * API Settings Form Component\n * \n * This component displays and allows management of API keys and usage.\n */\n\nimport React, { useState } from 'react';\nimport { ApiSettings } from '../types/index';\nimport Button from '../../../components/common/Button';\n\ninterface ApiSettingsFormProps {\n  settings: ApiSettings;\n  onRegenerateKey: (keyType: 'production' | 'test') => void;\n}\n\nconst ApiSettingsForm: React.FC<ApiSettingsFormProps> = ({\n  settings,\n  onRegenerateKey\n}) => {\n  const [showProductionKey, setShowProductionKey] = useState(false);\n  const [showTestKey, setShowTestKey] = useState(false);\n\n  const handleCopyKey = (key: string) => {\n    navigator.clipboard.writeText(key);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-medium text-gray-800\">Your API Keys</h3>\n        <p className=\"text-sm text-gray-500 mt-1\">\n          Use these keys to authenticate API requests from your applications\n        </p>\n        \n        {settings.keys.map((apiKey) => (\n          <div key={apiKey.type} className=\"mt-4 border border-gray-200 rounded-md overflow-hidden\">\n            <div className=\"px-4 py-3 bg-gray-50 border-b border-gray-200\">\n              <div className=\"flex justify-between items-center\">\n                <h4 className=\"text-sm font-medium text-gray-700\">{apiKey.name}</h4>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => onRegenerateKey(apiKey.type)}\n                >\n                  Regenerate\n                </Button>\n              </div>\n            </div>\n            <div className=\"px-4 py-3\">\n              <div className=\"flex items-center\">\n                <input\n                  type={apiKey.type === 'production' ? (showProductionKey ? 'text' : 'password') : (showTestKey ? 'text' : 'password')}\n                  readOnly\n                  value={apiKey.key}\n                  className=\"block w-full bg-gray-50 border-0 focus:ring-0 text-sm text-gray-500\"\n                />\n                <Button \n                  variant=\"text\" \n                  size=\"sm\"\n                  onClick={() => apiKey.type === 'production' \n                    ? setShowProductionKey(!showProductionKey) \n                    : setShowTestKey(!showTestKey)\n                  }\n                >\n                  {apiKey.type === 'production' \n                    ? (showProductionKey ? 'Hide' : 'Show') \n                    : (showTestKey ? 'Hide' : 'Show')\n                  }\n                </Button>\n                <Button \n                  variant=\"text\" \n                  size=\"sm\"\n                  onClick={() => handleCopyKey(apiKey.key)}\n                >\n                  Copy\n                </Button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"pt-4 border-t border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-800\">API Usage</h3>\n        <p className=\"text-sm text-gray-500 mt-1\">\n          Monitor your API usage and limits\n        </p>\n        \n        <div className=\"mt-4\">\n          <div className=\"flex justify-between items-center mb-1\">\n            <span className=\"text-sm font-medium text-gray-700\">Requests this month</span>\n            <span className=\"text-sm text-gray-500\">{settings.usage.current.toLocaleString()} / {settings.usage.limit.toLocaleString()}</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className=\"bg-primary h-2 rounded-full\" \n              style={{ width: `${settings.usage.percentage}%` }}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ApiSettingsForm;\n","/**\n * Billing Settings Form Component\n * \n * This component displays and allows management of billing settings.\n */\n\nimport React from 'react';\nimport { BillingSettings } from '../types/index';\nimport Button from '../../../components/common/Button';\n\ninterface BillingSettingsFormProps {\n  settings: BillingSettings;\n  onChangePlan: () => void;\n  onUpdatePaymentMethod: () => void;\n  onDownloadInvoice: (invoiceId: string) => void;\n}\n\nconst BillingSettingsForm: React.FC<BillingSettingsFormProps> = ({\n  settings,\n  onChangePlan,\n  onUpdatePaymentMethod,\n  onDownloadInvoice\n}) => {\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"text-lg font-medium text-gray-800\">Current Plan</h3>\n        <div className=\"mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h4 className=\"text-base font-medium text-gray-800\">{settings.plan.name}</h4>\n              <p className=\"text-sm text-gray-500 mt-1\">${settings.plan.price}/month</p>\n            </div>\n            <Button variant=\"outline\" onClick={onChangePlan}>Change Plan</Button>\n          </div>\n          <div className=\"mt-4 pt-4 border-t border-gray-200\">\n            <h5 className=\"text-sm font-medium text-gray-700\">Plan Features</h5>\n            <ul className=\"mt-2 space-y-1 text-sm text-gray-500\">\n              {settings.plan.features.map((feature, index) => (\n                <li key={index}>{feature}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"pt-4 border-t border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-800\">Payment Method</h3>\n        <div className=\"mt-4 flex items-center\">\n          <div className=\"flex-shrink-0\">\n            <div className=\"h-10 w-16 bg-gray-200 rounded flex items-center justify-center text-gray-500\">\n              {settings.paymentMethod.type}\n            </div>\n          </div>\n          <div className=\"ml-4\">\n            <p className=\"text-sm font-medium text-gray-700\">{settings.paymentMethod.type} ending in {settings.paymentMethod.last4}</p>\n            <p className=\"text-xs text-gray-500\">Expires {settings.paymentMethod.expiryMonth}/{settings.paymentMethod.expiryYear}</p>\n          </div>\n          <div className=\"ml-auto\">\n            <Button variant=\"outline\" size=\"sm\" onClick={onUpdatePaymentMethod}>Update</Button>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"pt-4 border-t border-gray-200\">\n        <h3 className=\"text-lg font-medium text-gray-800\">Billing History</h3>\n        <div className=\"mt-4 overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg\">\n          <table className=\"min-w-full divide-y divide-gray-300\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th scope=\"col\" className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6\">Date</th>\n                <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">Amount</th>\n                <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">Status</th>\n                <th scope=\"col\" className=\"relative py-3.5 pl-3 pr-4 sm:pr-6\">\n                  <span className=\"sr-only\">Actions</span>\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200 bg-white\">\n              {settings.invoices.map((invoice) => (\n                <tr key={invoice.id}>\n                  <td className=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm text-gray-500 sm:pl-6\">{invoice.date}</td>\n                  <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">${invoice.amount.toFixed(2)}</td>\n                  <td className=\"whitespace-nowrap px-3 py-4 text-sm\">\n                    <span className={`inline-flex rounded-full px-2 text-xs font-semibold leading-5 ${\n                      invoice.status === 'paid' \n                        ? 'bg-green-100 text-green-800' \n                        : invoice.status === 'pending' \n                          ? 'bg-yellow-100 text-yellow-800' \n                          : 'bg-red-100 text-red-800'\n                    }`}>\n                      {invoice.status.charAt(0).toUpperCase() + invoice.status.slice(1)}\n                    </span>\n                  </td>\n                  <td className=\"relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6\">\n                    <Button \n                      variant=\"text\" \n                      size=\"xs\"\n                      onClick={() => onDownloadInvoice(invoice.id)}\n                    >\n                      Download\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BillingSettingsForm;\n","/**\n * Settings API Service\n * \n * This file provides methods for interacting with the settings API endpoints.\n */\n\nimport apiClient from '../../../api';\nimport type { Settings, NotificationSettings, GeneralSettings, SecuritySettings, AppearanceSettings } from '../types';\n\nexport const settingsApi = {\n  /**\n   * Get all settings\n   */\n  getSettings: async (): Promise<Settings> => {\n    try {\n      const response = await apiClient.get<Settings>('/settings');\n      if (!response.data) {\n        throw new Error('No settings data received');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching settings:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Update settings\n   */\n  updateSettings: async (settings: Partial<Settings>): Promise<Settings> => {\n    try {\n      const response = await apiClient.put<Settings>('/settings', settings);\n      if (!response.data) {\n        throw new Error('Failed to update settings');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error updating settings:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get notification settings\n   */\n  getNotificationSettings: async (): Promise<NotificationSettings> => {\n    try {\n      const response = await apiClient.get<NotificationSettings>('/settings/notifications');\n      if (!response.data) {\n        throw new Error('No notification settings received');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching notification settings:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Update notification settings\n   */\n  updateNotificationSettings: async (settings: Partial<NotificationSettings>): Promise<NotificationSettings> => {\n    try {\n      const response = await apiClient.put<NotificationSettings>('/settings/notifications', settings);\n      if (!response.data) {\n        throw new Error('Failed to update notification settings');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error updating notification settings:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Update general settings\n   */\n  updateGeneralSettings: async (settings: Partial<GeneralSettings>): Promise<GeneralSettings> => {\n    try {\n      const response = await apiClient.put<GeneralSettings>('/settings/general', settings);\n      if (!response.data) {\n        throw new Error('Failed to update general settings');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error updating general settings:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Update security settings\n   */\n  updateSecuritySettings: async (settings: Partial<SecuritySettings>): Promise<SecuritySettings> => {\n    try {\n      const response = await apiClient.put<SecuritySettings>('/settings/security', settings);\n      if (!response.data) {\n        throw new Error('Failed to update security settings');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error updating security settings:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Update appearance settings\n   */\n  updateAppearanceSettings: async (settings: Partial<AppearanceSettings>): Promise<AppearanceSettings> => {\n    try {\n      const response = await apiClient.put<AppearanceSettings>('/settings/appearance', settings);\n      if (!response.data) {\n        throw new Error('Failed to update appearance settings');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error updating appearance settings:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Reset settings to defaults\n   */\n  resetSettings: async (): Promise<Settings> => {\n    try {\n      const response = await apiClient.post<Settings>('/settings/reset');\n      if (!response.data) {\n        throw new Error('Failed to reset settings');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error resetting settings:', error);\n      throw error;\n    }\n  }\n};\n\nexport default settingsApi;\n","/**\n * SettingsPage Component\n *\n * The settings page for the ConnectChain admin panel.\n */\n\nimport React, { useState } from 'react';\nimport PageHeader from '../components/layout/PageHeader';\nimport MigrationNotice from '../components/common/MigrationNotice';\nimport useNotification from '../hooks/useNotification';\nimport { ROUTES } from '../constants/routes';\nimport {\n  SettingsSidebar,\n  GeneralSettingsForm,\n  SecuritySettingsForm,\n  ApiSettingsForm,\n  BillingSettingsForm,\n\n  SettingsTab,\n  GeneralSettings,\n  SecuritySettings,\n  ApiSettings,\n  BillingSettings,\n\n} from '../features/settings/index';\n\nconst SettingsPage: React.FC = () => {\n  // In a real implementation, we would use the useSettings hook\n  // const { settings, isLoading, updateGeneralSettings, updateSecuritySettings, updateNotificationSettings, regenerateApiKey, updatePaymentMethod } = useSettings();\n\n  const { showSuccess } = useNotification();\n  const [activeTab, setActiveTab] = useState<SettingsTab>('general');\n\n  // Mock data for settings\n  const [generalSettings, setGeneralSettings] = useState<GeneralSettings>({\n    platformName: 'ConnectChain',\n    contactEmail: 'support@connectchain.com',\n    defaultLanguage: 'en',\n    timezone: 'UTC'\n  });\n\n  const [securitySettings, setSecuritySettings] = useState<SecuritySettings>({\n    twoFactorEnabled: false,\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n\n\n\n  const [apiSettings, _setApiSettings] = useState<ApiSettings>({\n    keys: [\n      {\n        name: 'Production API Key',\n        key: 'sk_prod_2023_xxxxxxxxxxxxxxxxxxxxxxxxxxx',\n        type: 'production'\n      },\n      {\n        name: 'Test API Key',\n        key: 'sk_test_2023_xxxxxxxxxxxxxxxxxxxxxxxxxxx',\n        type: 'test'\n      }\n    ],\n    usage: {\n      current: 12345,\n      limit: 50000,\n      percentage: 25\n    }\n  });\n\n  const [billingSettings, _setBillingSettings] = useState<BillingSettings>({\n    plan: {\n      name: 'Enterprise Plan',\n      price: 499,\n      features: [\n        'Unlimited users',\n        'Advanced analytics',\n        'Priority support',\n        'Custom integrations'\n      ]\n    },\n    paymentMethod: {\n      type: 'VISA',\n      last4: '4242',\n      expiryMonth: 12,\n      expiryYear: 2025\n    },\n    invoices: [\n      {\n        id: 'inv_2023_01',\n        date: 'Jan 1, 2023',\n        amount: 499,\n        status: 'paid',\n        downloadUrl: '#'\n      },\n      {\n        id: 'inv_2022_12',\n        date: 'Dec 1, 2022',\n        amount: 499,\n        status: 'paid',\n        downloadUrl: '#'\n      }\n    ]\n  });\n\n  const handleSave = () => {\n    showSuccess('Settings saved successfully');\n  };\n\n  const handleGeneralSettingsChange = (field: keyof GeneralSettings, value: string) => {\n    setGeneralSettings(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handlePasswordChange = (field: 'currentPassword' | 'newPassword' | 'confirmPassword', value: string) => {\n    setSecuritySettings(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleToggleTwoFactor = () => {\n    setSecuritySettings(prev => ({\n      ...prev,\n      twoFactorEnabled: !prev.twoFactorEnabled\n    }));\n  };\n\n\n\n  const handleRegenerateApiKey = (keyType: 'production' | 'test') => {\n    // In a real app, this would call an API to regenerate the key\n    console.log(`Regenerating ${keyType} API key`);\n  };\n\n  const handleChangePlan = () => {\n    // In a real app, this would navigate to a plan selection page\n    console.log('Changing plan');\n  };\n\n  const handleUpdatePaymentMethod = () => {\n    // In a real app, this would open a payment method form\n    console.log('Updating payment method');\n  };\n\n  const handleDownloadInvoice = (invoiceId: string) => {\n    // In a real app, this would download the invoice\n    console.log(`Downloading invoice ${invoiceId}`);\n  };\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'security':\n        return (\n          <SecuritySettingsForm\n            settings={securitySettings}\n            onSave={handleSave}\n            onToggleTwoFactor={handleToggleTwoFactor}\n            onPasswordChange={handlePasswordChange}\n          />\n        );\n\n      case 'api':\n        return (\n          <ApiSettingsForm\n            settings={apiSettings}\n            onRegenerateKey={handleRegenerateApiKey}\n          />\n        );\n      case 'billing':\n        return (\n          <BillingSettingsForm\n            settings={billingSettings}\n            onChangePlan={handleChangePlan}\n            onUpdatePaymentMethod={handleUpdatePaymentMethod}\n            onDownloadInvoice={handleDownloadInvoice}\n          />\n        );\n      default:\n        return (\n          <GeneralSettingsForm\n            settings={generalSettings}\n            onSave={handleSave}\n            onChange={handleGeneralSettingsChange}\n          />\n        );\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <PageHeader\n        title=\"Settings\"\n        description=\"Manage your application settings\"\n        breadcrumbs={[{ label: 'Settings' }]}\n      />\n\n      {/* Migration Notice */}\n      <MigrationNotice\n        title=\"Notification Settings Moved\"\n        message=\"Notification preferences have been moved to your Profile page for better organization. You can now manage both personal and admin notifications in one place.\"\n        actionText=\"Go to Profile → Notifications\"\n        actionLink={ROUTES.PROFILE}\n        type=\"info\"\n      />\n\n      <div className=\"grid grid-cols-12 gap-6\">\n        {/* Sidebar */}\n        <div className=\"col-span-12 md:col-span-3\">\n          <SettingsSidebar\n            activeTab={activeTab}\n            onTabChange={setActiveTab}\n          />\n        </div>\n\n        {/* Content */}\n        <div className=\"col-span-12 md:col-span-9\">\n          {renderTabContent()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n","/**\n * PageHeader Component\n * \n * A consistent header component for pages with title, description, and actions.\n */\n\nimport React, { memo } from 'react';\nimport type { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ChevronRightIcon, HomeIcon } from '@heroicons/react/24/outline';\n\nexport interface BreadcrumbItem {\n  label: string;\n  path?: string;\n}\n\nexport interface PageHeaderProps {\n  title: string;\n  description?: string | ReactNode;\n  actions?: ReactNode;\n  breadcrumbs?: BreadcrumbItem[];\n  className?: string;\n  testId?: string;\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({\n  title,\n  description,\n  actions,\n  breadcrumbs,\n  className = '',\n  testId,\n}) => {\n  return (\n    <div \n      className={`mb-6 ${className}`}\n      data-testid={testId}\n    >\n      {/* Breadcrumbs */}\n      {breadcrumbs && breadcrumbs.length > 0 && (\n        <nav className=\"flex mb-4\" aria-label=\"Breadcrumb\">\n          <ol className=\"flex items-center space-x-1 text-sm text-gray-500\">\n            <li>\n              <Link \n                to=\"/\" \n                className=\"flex items-center hover:text-primary\"\n                aria-label=\"Home\"\n              >\n                <HomeIcon className=\"h-4 w-4\" />\n              </Link>\n            </li>\n            \n            {breadcrumbs.map((item, index) => (\n              <li key={index} className=\"flex items-center\">\n                <ChevronRightIcon className=\"h-4 w-4 mx-1 text-gray-400\" />\n                {item.path && index < breadcrumbs.length - 1 ? (\n                  <Link \n                    to={item.path} \n                    className=\"hover:text-primary\"\n                  >\n                    {item.label}\n                  </Link>\n                ) : (\n                  <span className=\"font-medium text-gray-700\">{item.label}</span>\n                )}\n              </li>\n            ))}\n          </ol>\n        </nav>\n      )}\n      \n      {/* Header Content */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">{title}</h1>\n          {description && typeof description === 'string' ? (\n            <p className=\"mt-1 text-sm text-gray-500\">{description}</p>\n          ) : (\n            description\n          )}\n        </div>\n        \n        {actions && (\n          <div className=\"flex flex-wrap gap-3 mt-2 sm:mt-0\">\n            {actions}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PageHeader);\n","/**\n * Card Component\n *\n * A reusable card component for displaying content in a contained box.\n */\n\nimport React, { memo } from 'react';\nimport type { ReactNode } from 'react';\n\nexport interface CardProps {\n  title?: string | ReactNode;\n  subtitle?: string | ReactNode;\n  children: ReactNode;\n  className?: string;\n  bodyClassName?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n  icon?: ReactNode;\n  footer?: ReactNode;\n  onClick?: () => void;\n  hoverable?: boolean;\n  noPadding?: boolean;\n  bordered?: boolean;\n  loading?: boolean;\n  testId?: string;\n}\n\nconst Card: React.FC<CardProps> = ({\n  title,\n  subtitle,\n  children,\n  className = '',\n  bodyClassName = '',\n  headerClassName = '',\n  footerClassName = '',\n  icon,\n  footer,\n  onClick,\n  hoverable = false,\n  noPadding = false,\n  bordered = true,\n  loading = false,\n  testId,\n}) => {\n  // Base classes\n  const cardClasses = `\n    bg-white rounded-xl ${bordered ? 'border border-gray-100' : ''} overflow-hidden transition-all duration-300\n    ${hoverable ? 'hover:shadow-md hover:border-gray-200 transform hover:-translate-y-1' : 'shadow-sm'}\n    ${onClick ? 'cursor-pointer' : ''}\n    ${className}\n  `;\n\n  // Header classes\n  const headerClasses = `\n    px-6 py-4 border-b border-gray-100 flex items-center justify-between\n    ${headerClassName}\n  `;\n\n  // Body classes\n  const bodyClasses = `\n    ${noPadding ? '' : 'p-6'}\n    ${bodyClassName}\n  `;\n\n  // Footer classes\n  const footerClasses = `\n    px-6 py-4 bg-gray-50 border-t border-gray-100\n    ${footerClassName}\n  `;\n\n  // Loading skeleton\n  if (loading) {\n    return (\n      <div className={cardClasses} data-testid={testId}>\n        {(title || subtitle || icon) && (\n          <div className={headerClasses}>\n            <div className=\"w-full\">\n              {title && <div className=\"h-6 bg-gray-200 rounded w-1/3 animate-pulse\"></div>}\n              {subtitle && <div className=\"h-4 mt-2 bg-gray-200 rounded w-1/2 animate-pulse\"></div>}\n            </div>\n            {icon && <div className=\"h-8 w-8 bg-gray-200 rounded-full animate-pulse\"></div>}\n          </div>\n        )}\n\n        <div className={bodyClasses}>\n          <div className=\"h-24 bg-gray-200 rounded animate-pulse\"></div>\n        </div>\n\n        {footer && (\n          <div className={footerClasses}>\n            <div className=\"h-8 bg-gray-200 rounded w-1/4 animate-pulse\"></div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cardClasses}\n      onClick={onClick}\n      data-testid={testId}\n    >\n      {(title || subtitle || icon) && (\n        <div className={headerClasses}>\n          <div>\n            {typeof title === 'string' ? (\n              <h3 className=\"text-lg font-semibold text-primary\">{title}</h3>\n            ) : (\n              title\n            )}\n            {typeof subtitle === 'string' ? (\n              <p className=\"mt-1 text-sm text-gray-500\">{subtitle}</p>\n            ) : (\n              subtitle\n            )}\n          </div>\n          {icon && <div className=\"text-primary\">{icon}</div>}\n        </div>\n      )}\n\n      <div className={bodyClasses}>{children}</div>\n\n      {footer && (\n        <div className={footerClasses}>\n          {footer}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Card);\n","import * as React from \"react\";\nfunction ChevronRightIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m8.25 4.5 7.5 7.5-7.5 7.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChevronRightIcon);\nexport default ForwardRef;","/**\n * Button Component\n * \n * A reusable button component with various styles and states.\n */\n\nimport React, { memo } from 'react';\nimport type { ReactNode } from 'react';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'danger' | 'success' | 'text' | 'link';\nexport type ButtonSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\nexport interface ButtonProps {\n  children: ReactNode;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  className?: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  type?: 'button' | 'submit' | 'reset';\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  loading?: boolean;\n  rounded?: boolean;\n  href?: string;\n  target?: string;\n  rel?: string;\n  title?: string;\n  ariaLabel?: string;\n  testId?: string;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  children,\n  variant = 'primary',\n  size = 'md',\n  className = '',\n  onClick,\n  disabled = false,\n  type = 'button',\n  icon,\n  iconPosition = 'left',\n  fullWidth = false,\n  loading = false,\n  rounded = false,\n  href,\n  target,\n  rel,\n  title,\n  ariaLabel,\n  testId,\n}) => {\n  const baseClasses = 'inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';\n  \n  const variantClasses = {\n    primary: 'bg-primary text-white hover:bg-primary/90 focus:ring-primary',\n    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-300',\n    outline: 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-primary',\n    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',\n    success: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500',\n    text: 'bg-transparent text-primary hover:bg-gray-100 focus:ring-primary',\n    link: 'bg-transparent text-primary hover:underline focus:ring-transparent p-0',\n  };\n  \n  const sizeClasses = {\n    xs: 'text-xs px-2 py-1',\n    sm: 'text-xs px-3 py-1.5',\n    md: 'text-sm px-4 py-2',\n    lg: 'text-base px-5 py-2.5',\n    xl: 'text-lg px-6 py-3',\n  };\n  \n  const disabledClasses = disabled ? 'opacity-60 cursor-not-allowed' : 'cursor-pointer';\n  const widthClass = fullWidth ? 'w-full' : '';\n  const roundedClass = rounded ? 'rounded-full' : 'rounded-lg';\n  \n  const buttonClasses = `\n    ${baseClasses}\n    ${variantClasses[variant]}\n    ${sizeClasses[size]}\n    ${disabledClasses}\n    ${widthClass}\n    ${roundedClass}\n    ${className}\n  `;\n  \n  const content = (\n    <>\n      {loading && (\n        <svg \n          className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-current\" \n          xmlns=\"http://www.w3.org/2000/svg\" \n          fill=\"none\" \n          viewBox=\"0 0 24 24\"\n          aria-hidden=\"true\"\n        >\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n        </svg>\n      )}\n      \n      {icon && iconPosition === 'left' && !loading && (\n        <span className=\"mr-2\">{icon}</span>\n      )}\n      \n      {children}\n      \n      {icon && iconPosition === 'right' && (\n        <span className=\"ml-2\">{icon}</span>\n      )}\n    </>\n  );\n  \n  // If href is provided, render an anchor tag\n  if (href) {\n    return (\n      <a\n        href={href}\n        className={buttonClasses}\n        target={target}\n        rel={rel || (target === '_blank' ? 'noopener noreferrer' : undefined)}\n        onClick={onClick}\n        title={title}\n        aria-label={ariaLabel}\n        data-testid={testId}\n      >\n        {content}\n      </a>\n    );\n  }\n  \n  // Otherwise render a button\n  return (\n    <button\n      type={type}\n      className={buttonClasses}\n      onClick={onClick}\n      disabled={disabled || loading}\n      title={title}\n      aria-label={ariaLabel}\n      data-testid={testId}\n    >\n      {content}\n    </button>\n  );\n};\n\nexport default memo(Button);\n"],"names":["_ref","title","message","actionText","actionLink","onDismiss","type","className","_jsx","info","warning","success","children","_jsxs","InformationCircleIcon","Link","to","onClick","XMarkIcon","activeTab","onTabChange","Card","noPadding","id","label","map","tab","settings","onSave","onChange","value","platformName","e","target","contactEmail","defaultLanguage","timezone","Button","variant","onToggleTwoFactor","onPasswordChange","currentPassword","newPassword","confirmPassword","twoFactorEnabled","onRegenerateKey","showProductionKey","setShowProductionKey","useState","showTestKey","setShowTestKey","keys","apiKey","name","size","readOnly","key","handleCopyKey","navigator","clipboard","writeText","usage","current","toLocaleString","limit","style","width","percentage","onChangePlan","onUpdatePaymentMethod","onDownloadInvoice","plan","price","features","feature","index","paymentMethod","last4","expiryMonth","expiryYear","scope","invoices","invoice","date","amount","toFixed","status","charAt","toUpperCase","slice","SettingsPage","showSuccess","useNotification","setActiveTab","generalSettings","setGeneralSettings","securitySettings","setSecuritySettings","apiSettings","_setApiSettings","billingSettings","_setBillingSettings","downloadUrl","handleSave","handleGeneralSettingsChange","field","prev","handlePasswordChange","handleToggleTwoFactor","handleRegenerateApiKey","keyType","console","log","handleChangePlan","handleUpdatePaymentMethod","handleDownloadInvoice","invoiceId","PageHeader","description","breadcrumbs","MigrationNotice","ROUTES","PROFILE","SettingsSidebar","renderTabContent","SecuritySettingsForm","ApiSettingsForm","BillingSettingsForm","GeneralSettingsForm","actions","testId","length","HomeIcon","item","ChevronRightIcon","path","memo","subtitle","bodyClassName","headerClassName","footerClassName","icon","footer","hoverable","bordered","loading","cardClasses","headerClasses","bodyClasses","footerClasses","svgRef","titleId","props","React","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","strokeLinecap","strokeLinejoin","d","disabled","iconPosition","fullWidth","rounded","href","rel","ariaLabel","buttonClasses","primary","secondary","outline","danger","text","link","xs","sm","md","lg","xl","content","_Fragment","cx","cy","r","undefined"],"sourceRoot":""}