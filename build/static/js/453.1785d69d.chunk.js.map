{"version":3,"file":"static/js/453.1785d69d.chunk.js","mappings":"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","sources":["components/common/Tabs.tsx","components/common/LoadingSpinner.tsx","pages/UserEditPage.tsx"],"sourcesContent":["// src/components/common/Tabs.tsx\r\nimport React from 'react';\r\n\r\nexport interface Tab {\r\n  id: string;\r\n  label: string;\r\n  disabled?: boolean;\r\n}\r\n\r\ninterface TabsProps {\r\n  tabs: Tab[];\r\n  activeTab: string;\r\n  onChange: (tabId: string) => void;\r\n  className?: string;\r\n}\r\n\r\nconst Tabs: React.FC<TabsProps> = ({\r\n  tabs,\r\n  activeTab,\r\n  onChange,\r\n  className = ''\r\n}) => {\r\n  return (\r\n    <div className={`border-b border-gray-200 ${className}`}>\r\n      <nav className=\"-mb-px flex space-x-8\">\r\n        {tabs.map((tab) => {\r\n          const isActive = tab.id === activeTab;\r\n          \r\n          return (\r\n            <button\r\n              key={tab.id}\r\n              onClick={() => !tab.disabled && onChange(tab.id)}\r\n              className={`\r\n                whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm\r\n                ${isActive \r\n                  ? 'border-primary text-primary' \r\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}\r\n                ${tab.disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}\r\n              `}\r\n              disabled={tab.disabled}\r\n            >\r\n              {tab.label}\r\n            </button>\r\n          );\r\n        })}\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tabs;","// src/components/common/LoadingSpinner.tsx\r\nimport React from 'react';\r\n\r\ninterface LoadingSpinnerProps {\r\n  size?: 'sm' | 'md' | 'lg';\r\n  className?: string;\r\n  color?: string;\r\n}\r\n\r\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({\r\n  size = 'md',\r\n  className = '',\r\n  color = '#F28B22' // Primary color\r\n}) => {\r\n  const sizeMap = {\r\n    sm: 'w-5 h-5',\r\n    md: 'w-8 h-8',\r\n    lg: 'w-12 h-12'\r\n  };\r\n  \r\n  const sizeClass = sizeMap[size];\r\n  \r\n  return (\r\n    <div className={`flex justify-center items-center ${className}`}>\r\n      <svg \r\n        className={`animate-spin ${sizeClass}`} \r\n        xmlns=\"http://www.w3.org/2000/svg\" \r\n        fill=\"none\" \r\n        viewBox=\"0 0 24 24\"\r\n      >\r\n        <circle \r\n          className=\"opacity-25\" \r\n          cx=\"12\" \r\n          cy=\"12\" \r\n          r=\"10\" \r\n          stroke=\"currentColor\" \r\n          strokeWidth=\"4\"\r\n        ></circle>\r\n        <path \r\n          className=\"opacity-75\" \r\n          fill={color} \r\n          d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n        ></path>\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PageHeader from '../components/layout/PageHeader';\nimport Tabs from '../components/common/Tabs';\nimport { UserDetails, EditUserForm, UserAnalytics, useUsers } from '../features/users/index';\nimport { useOrders } from '../features/orders/index';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\nimport type { User } from '../features/users/types';\n\nconst UserEditPage: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n  const userId = id || ''; // Default to empty string if undefined\n  const { getUserById, updateUser: _updateUser } = useUsers({ initialFetch: false });\n  const { getOrdersByCustomer } = useOrders();\n  \n  const [user, setUser] = useState<User | null>(null);\n  const [userOrders, setUserOrders] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('details');\n  \n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        setIsLoading(true);\n        const userData = await getUserById(userId);\n        setUser(userData);\n        \n        const orders = await getOrdersByCustomer(userId);\n        setUserOrders(orders);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    if (userId) {\n      fetchUserData();\n    }\n  }, [userId, getUserById, getOrdersByCustomer]);\n  \n  if (isLoading) {\n    return <LoadingSpinner />;\n  }\n  \n  if (!user) {\n    return <div>User not found</div>;\n  }\n  \n  // Calculate analytics data\n  const userAnalyticsData = {\n    totalOrders: userOrders.length,\n    totalSpent: userOrders.reduce((sum, order) => sum + order.totalAmount, 0),\n    averageOrderValue: userOrders.length > 0 \n      ? userOrders.reduce((sum, order) => sum + order.totalAmount, 0) / userOrders.length \n      : 0,\n    orderFrequency: 0, // Would calculate based on date ranges in a real app\n    orderHistory: userOrders.map(order => ({\n      date: order.orderDate,\n      amount: order.totalAmount\n    }))\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      <PageHeader\n        title={`User: ${user.name}`}\n        description=\"View and edit user details\"\n        breadcrumbs={[\n          { label: 'Users', path: '/users' },\n          { label: user.name }\n        ]}\n      />\n      \n      <Tabs\n        tabs={[\n          { id: 'details', label: 'Details' },\n          { id: 'edit', label: 'Edit' },\n          { id: 'analytics', label: 'Analytics' }\n        ]}\n        activeTab={activeTab}\n        onChange={setActiveTab}\n      />\n      \n      {activeTab === 'details' && (\n        <UserDetails user={user} userOrders={userOrders} />\n      )}\n      \n      {activeTab === 'edit' && (\n        <EditUserForm\n          user={user}\n          onSubmit={async (_userData) => {\n            // Implementation\n          }}\n        />\n      )}\n      \n      {activeTab === 'analytics' && (\n        <UserAnalytics\n          userId={userId}\n          userData={userAnalyticsData}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default UserEditPage;"],"names":["_ref","tabs","activeTab","onChange","className","_jsx","children","map","tab","isActive","id","onClick","disabled","label","size","color","sizeClass","sm","md","lg","_jsxs","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","UserEditPage","useParams","userId","getUserById","updateUser","_updateUser","useUsers","initialFetch","getOrdersByCustomer","useOrders","user","setUser","useState","userOrders","setUserOrders","isLoading","setIsLoading","setActiveTab","useEffect","async","userData","orders","error","console","fetchUserData","LoadingSpinner","userAnalyticsData","totalOrders","length","totalSpent","reduce","sum","order","totalAmount","averageOrderValue","orderFrequency","orderHistory","date","orderDate","amount","PageHeader","title","name","description","breadcrumbs","path","Tabs","UserDetails","EditUserForm","onSubmit","UserAnalytics"],"sourceRoot":""}