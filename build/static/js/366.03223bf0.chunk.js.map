{"version":3,"file":"static/js/366.03223bf0.chunk.js","mappings":"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","sources":["components/common/Card.tsx","utils/formatters.ts","components/common/StatusBadge.tsx","../node_modules/@heroicons/react/24/outline/esm/ArrowDownTrayIcon.js","components/common/EntityList/BaseEntityList.tsx","../node_modules/@heroicons/react/24/outline/esm/TruckIcon.js","../node_modules/@heroicons/react/24/outline/esm/ClockIcon.js","../node_modules/@heroicons/react/24/outline/esm/XCircleIcon.js","../node_modules/@heroicons/react/24/outline/esm/MagnifyingGlassIcon.js","../node_modules/@heroicons/react/24/outline/esm/ChevronUpIcon.js","components/common/DataTable.tsx","components/common/Button.tsx","components/common/Modal.tsx","pages/OrdersPage.tsx"],"sourcesContent":["/**\n * Card Component\n *\n * A reusable card component for displaying content in a contained box.\n */\n\nimport React, { memo } from 'react';\nimport type { ReactNode } from 'react';\n\nexport interface CardProps {\n  title?: string | ReactNode;\n  subtitle?: string | ReactNode;\n  children: ReactNode;\n  className?: string;\n  bodyClassName?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n  icon?: ReactNode;\n  footer?: ReactNode;\n  onClick?: () => void;\n  hoverable?: boolean;\n  noPadding?: boolean;\n  bordered?: boolean;\n  loading?: boolean;\n  testId?: string;\n}\n\nconst Card: React.FC<CardProps> = ({\n  title,\n  subtitle,\n  children,\n  className = '',\n  bodyClassName = '',\n  headerClassName = '',\n  footerClassName = '',\n  icon,\n  footer,\n  onClick,\n  hoverable = false,\n  noPadding = false,\n  bordered = true,\n  loading = false,\n  testId,\n}) => {\n  // Base classes\n  const cardClasses = `\n    bg-white rounded-xl ${bordered ? 'border border-gray-100' : ''} overflow-hidden transition-all duration-300\n    ${hoverable ? 'hover:shadow-md hover:border-gray-200 transform hover:-translate-y-1' : 'shadow-sm'}\n    ${onClick ? 'cursor-pointer' : ''}\n    ${className}\n  `;\n\n  // Header classes\n  const headerClasses = `\n    px-6 py-4 border-b border-gray-100 flex items-center justify-between\n    ${headerClassName}\n  `;\n\n  // Body classes\n  const bodyClasses = `\n    ${noPadding ? '' : 'p-6'}\n    ${bodyClassName}\n  `;\n\n  // Footer classes\n  const footerClasses = `\n    px-6 py-4 bg-gray-50 border-t border-gray-100\n    ${footerClassName}\n  `;\n\n  // Loading skeleton\n  if (loading) {\n    return (\n      <div className={cardClasses} data-testid={testId}>\n        {(title || subtitle || icon) && (\n          <div className={headerClasses}>\n            <div className=\"w-full\">\n              {title && <div className=\"h-6 bg-gray-200 rounded w-1/3 animate-pulse\"></div>}\n              {subtitle && <div className=\"h-4 mt-2 bg-gray-200 rounded w-1/2 animate-pulse\"></div>}\n            </div>\n            {icon && <div className=\"h-8 w-8 bg-gray-200 rounded-full animate-pulse\"></div>}\n          </div>\n        )}\n\n        <div className={bodyClasses}>\n          <div className=\"h-24 bg-gray-200 rounded animate-pulse\"></div>\n        </div>\n\n        {footer && (\n          <div className={footerClasses}>\n            <div className=\"h-8 bg-gray-200 rounded w-1/4 animate-pulse\"></div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cardClasses}\n      onClick={onClick}\n      data-testid={testId}\n    >\n      {(title || subtitle || icon) && (\n        <div className={headerClasses}>\n          <div>\n            {typeof title === 'string' ? (\n              <h3 className=\"text-lg font-semibold text-primary\">{title}</h3>\n            ) : (\n              title\n            )}\n            {typeof subtitle === 'string' ? (\n              <p className=\"mt-1 text-sm text-gray-500\">{subtitle}</p>\n            ) : (\n              subtitle\n            )}\n          </div>\n          {icon && <div className=\"text-primary\">{icon}</div>}\n        </div>\n      )}\n\n      <div className={bodyClasses}>{children}</div>\n\n      {footer && (\n        <div className={footerClasses}>\n          {footer}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Card);\n","/**\n * Formatters\n * \n * This file contains utility functions for formatting data.\n */\n\n/**\n * Format a date string to a human-readable format\n */\nexport const formatDate = (dateString: string, options: Intl.DateTimeFormatOptions = {}): string => {\n  if (!dateString) return '-';\n  \n  try {\n    const date = new Date(dateString);\n    \n    // Default options\n    const defaultOptions: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      ...options\n    };\n    \n    return new Intl.DateTimeFormat('en-US', defaultOptions).format(date);\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateString;\n  }\n};\n\n/**\n * Format a date string to include time\n */\nexport const formatDateTime = (dateString: string): string => {\n  return formatDate(dateString, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\n/**\n * Format a number as currency\n */\nexport const formatCurrency = (\n  amount: number,\n  currency: string = 'USD',\n  locale: string = 'en-US'\n): string => {\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(amount);\n  } catch (error) {\n    console.error('Error formatting currency:', error);\n    return `${currency} ${amount.toFixed(2)}`;\n  }\n};\n\n/**\n * Format a number with commas\n */\nexport const formatNumber = (\n  number: number,\n  options: Intl.NumberFormatOptions = {}\n): string => {\n  try {\n    return new Intl.NumberFormat('en-US', options).format(number);\n  } catch (error) {\n    console.error('Error formatting number:', error);\n    return number.toString();\n  }\n};\n\n/**\n * Format a phone number\n */\nexport const formatPhoneNumber = (phoneNumber: string): string => {\n  if (!phoneNumber) return '-';\n  \n  // Remove all non-numeric characters\n  const cleaned = phoneNumber.replace(/\\D/g, '');\n  \n  // Format based on length\n  if (cleaned.length === 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n  } else if (cleaned.length === 11 && cleaned.startsWith('1')) {\n    return `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`;\n  }\n  \n  // If it doesn't match expected formats, return as is\n  return phoneNumber;\n};\n\n/**\n * Truncate text with ellipsis\n */\nexport const truncateText = (text: string, maxLength: number): string => {\n  if (!text) return '';\n  if (text.length <= maxLength) return text;\n  \n  return `${text.slice(0, maxLength)}...`;\n};\n\n/**\n * Format file size\n */\nexport const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n};\n\n/**\n * Format a duration in milliseconds to a human-readable format\n */\nexport const formatDuration = (milliseconds: number): string => {\n  const seconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  \n  if (days > 0) {\n    return `${days} day${days > 1 ? 's' : ''}`;\n  } else if (hours > 0) {\n    return `${hours} hour${hours > 1 ? 's' : ''}`;\n  } else if (minutes > 0) {\n    return `${minutes} minute${minutes > 1 ? 's' : ''}`;\n  } else {\n    return `${seconds} second${seconds !== 1 ? 's' : ''}`;\n  }\n};\n","import React from 'react';\r\nimport {\r\n  CheckCircleIcon,\r\n  XCircleIcon,\r\n  ClockIcon,\r\n  TruckIcon,\r\n  ExclamationCircleIcon\r\n} from '@heroicons/react/24/outline';\r\n\r\nexport type StatusType = 'user' | 'supplier' | 'order' | 'verification' | 'category';\r\n\r\ninterface StatusBadgeProps {\r\n  status: string;\r\n  type?: StatusType;\r\n  className?: string;\r\n}\r\n\r\nconst StatusBadge: React.FC<StatusBadgeProps> = ({\r\n  status,\r\n  type: _type = 'user',\r\n  className = ''\r\n}) => {\r\n  const statusKey = status.toLowerCase();\r\n  let colorClass = '';\r\n  let icon = null;\r\n  \r\n  // Common statuses across entity types\r\n  if (statusKey === 'active' || statusKey === 'verified' || statusKey === 'completed') {\r\n    colorClass = 'bg-green-100 text-green-800';\r\n    icon = <CheckCircleIcon className=\"w-4 h-4 mr-1\" />;\r\n  } else if (statusKey === 'pending' || statusKey === 'processing') {\r\n    colorClass = 'bg-blue-100 text-blue-800';\r\n    icon = <ClockIcon className=\"w-4 h-4 mr-1\" />;\r\n  } else if (statusKey === 'banned' || statusKey === 'rejected') {\r\n    colorClass = 'bg-red-100 text-red-800';\r\n    icon = <XCircleIcon className=\"w-4 h-4 mr-1\" />;\r\n  } else if (statusKey === 'shipped') {\r\n    colorClass = 'bg-purple-100 text-purple-800';\r\n    icon = <TruckIcon className=\"w-4 h-4 mr-1\" />;\r\n  } else if (statusKey === 'warning') {\r\n    colorClass = 'bg-yellow-100 text-yellow-800';\r\n    icon = <ExclamationCircleIcon className=\"w-4 h-4 mr-1\" />;\r\n  } else {\r\n    colorClass = 'bg-gray-100 text-gray-800';\r\n  }\r\n  \r\n  // Format the status text (capitalize first letter)\r\n  const formattedStatus = status.charAt(0).toUpperCase() + status.slice(1);\r\n  \r\n  return (\r\n    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colorClass} ${className}`}>\r\n      {icon}\r\n      {formattedStatus}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default StatusBadge;\r\n","import * as React from \"react\";\nfunction ArrowDownTrayIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5M16.5 12 12 16.5m0 0L7.5 12m4.5 4.5V3\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ArrowDownTrayIcon);\nexport default ForwardRef;","/**\r\n * BaseEntityList Component\r\n *\r\n * A reusable list component for displaying entities in a data table.\r\n * This component is generic and can be used for any entity type.\r\n */\r\n\r\nimport DataTable from '../DataTable';\r\nimport type { Column } from '../DataTable';\r\n\r\nexport interface BaseEntityListProps<T> {\r\n  data: T[];\r\n  columns: Column<T>[];\r\n  onRowClick?: (entity: T) => void;\r\n  title?: string;\r\n  pagination?: boolean;\r\n  loading?: boolean;\r\n  emptyMessage?: string;\r\n  className?: string;\r\n}\r\n\r\nexport const BaseEntityList = <T extends Record<string, any>>({\r\n  data,\r\n  columns,\r\n  onRowClick,\r\n  title,\r\n  pagination = true,\r\n  loading = false,\r\n  emptyMessage = 'No data available',\r\n  className = ''\r\n}: BaseEntityListProps<T>) => {\r\n  return (\r\n    <DataTable<T>\r\n      columns={columns}\r\n      data={data}\r\n      onRowClick={onRowClick}\r\n      title={title}\r\n      pagination={pagination}\r\n      loading={loading}\r\n      emptyMessage={emptyMessage}\r\n      className={className}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BaseEntityList;","import * as React from \"react\";\nfunction TruckIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M8.25 18.75a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 0 1-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h1.125c.621 0 1.129-.504 1.09-1.124a17.902 17.902 0 0 0-3.213-9.193 2.056 2.056 0 0 0-1.58-.86H14.25M16.5 18.75h-2.25m0-11.177v-.958c0-.568-.422-1.048-.987-1.106a48.554 48.554 0 0 0-10.026 0 1.106 1.106 0 0 0-.987 1.106v7.635m12-6.677v6.677m0 4.5v-4.5m0 0h-12\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(TruckIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ClockIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ClockIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction XCircleIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m9.75 9.75 4.5 4.5m0-4.5-4.5 4.5M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(XCircleIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction MagnifyingGlassIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(MagnifyingGlassIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ChevronUpIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m4.5 15.75 7.5-7.5 7.5 7.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChevronUpIcon);\nexport default ForwardRef;","/**\n * DataTable Component\n *\n * A reusable data table component with sorting, filtering, pagination, and row selection.\n */\n\nimport React, { useState, useMemo, memo } from 'react';\nimport { MagnifyingGlassIcon, ChevronUpIcon, ChevronDownIcon } from '@heroicons/react/24/outline';\nimport { CONFIG } from '../../constants/config';\n\nexport interface Column<T = Record<string, any>> {\n  key: string;\n  label: string;\n  sortable?: boolean;\n  render?: (value: any, row: T) => React.ReactNode;\n  width?: string;\n  align?: 'left' | 'center' | 'right';\n  className?: string;\n}\n\nexport interface DataTableProps<T = Record<string, any>> {\n  columns: Column<T>[];\n  data: T[];\n  onRowClick?: ((row: T) => void) | undefined;\n  title?: string | React.ReactNode;\n  description?: string | React.ReactNode;\n  loading?: boolean;\n  pagination?: boolean;\n  pageSize?: number;\n  selectable?: boolean;\n  onSelectionChange?: (selectedRows: T[]) => void;\n  actions?: React.ReactNode;\n  emptyMessage?: string;\n  className?: string;\n  headerClassName?: string;\n  bodyClassName?: string;\n  footerClassName?: string;\n  rowClassName?: (row: T, index: number) => string;\n  initialSortKey?: string;\n  initialSortDirection?: 'asc' | 'desc';\n  testId?: string;\n}\n\nfunction DataTable<T extends Record<string, any>>({\n  columns,\n  data,\n  onRowClick,\n  title,\n  description,\n  loading = false,\n  pagination = true,\n  pageSize = CONFIG.DEFAULT_PAGE_SIZE,\n  selectable = true,\n  onSelectionChange,\n  actions,\n  emptyMessage = 'No results found',\n  className = '',\n  headerClassName = '',\n  bodyClassName = '',\n  footerClassName = '',\n  rowClassName,\n  initialSortKey,\n  initialSortDirection = 'asc',\n  testId,\n}: DataTableProps<T>) {\n  // State\n  const [sortConfig, setSortConfig] = useState<{\n    key: string;\n    direction: 'asc' | 'desc';\n  } | null>(initialSortKey ? { key: initialSortKey, direction: initialSortDirection } : null);\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedRows, setSelectedRows] = useState<number[]>([]);\n  const [hoveredRow, setHoveredRow] = useState<number | null>(null);\n\n  // Sorting\n  const handleSort = (key: string) => {\n    let direction: 'asc' | 'desc' = 'asc';\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'asc') {\n      direction = 'desc';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  const sortedData = useMemo(() => {\n    if (!sortConfig) return data;\n\n    return [...data].sort((a, b) => {\n      const aValue = a[sortConfig.key];\n      const bValue = b[sortConfig.key];\n\n      // Handle null or undefined values\n      if (aValue == null && bValue == null) return 0;\n      if (aValue == null) return sortConfig.direction === 'asc' ? -1 : 1;\n      if (bValue == null) return sortConfig.direction === 'asc' ? 1 : -1;\n\n      // Handle different data types\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortConfig.direction === 'asc'\n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n\n      if (aValue < bValue) {\n        return sortConfig.direction === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortConfig.direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  }, [data, sortConfig]);\n\n  // Filtering\n  const filteredData = useMemo(() => {\n    if (!searchTerm) return sortedData;\n\n    return sortedData.filter((row) =>\n      Object.entries(row).some(([_key, value]) => {\n        // Skip filtering on complex objects\n        if (value === null || value === undefined) return false;\n        if (typeof value === 'object') return false;\n\n        return String(value).toLowerCase().includes(searchTerm.toLowerCase());\n      })\n    );\n  }, [sortedData, searchTerm]);\n\n  // Pagination\n  const totalPages = Math.ceil(filteredData.length / pageSize);\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    return filteredData.slice(startIndex, startIndex + pageSize);\n  }, [filteredData, currentPage, pageSize]);\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  // Row selection\n  const handleRowSelect = (index: number, event: React.MouseEvent) => {\n    event.stopPropagation();\n\n    const newSelectedRows = [...selectedRows];\n\n    if (selectedRows.includes(index)) {\n      const idx = newSelectedRows.indexOf(index);\n      newSelectedRows.splice(idx, 1);\n    } else {\n      newSelectedRows.push(index);\n    }\n\n    setSelectedRows(newSelectedRows);\n\n    if (onSelectionChange) {\n      const selectedItems = newSelectedRows\n        .map(idx => paginatedData[idx])\n        .filter((item): item is T => item !== undefined);\n      onSelectionChange(selectedItems);\n    }\n  };\n\n  const handleSelectAll = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newSelectedRows = event.target.checked\n      ? Array.from({ length: paginatedData.length }, (_, i) => i)\n      : [];\n\n    setSelectedRows(newSelectedRows);\n\n    if (onSelectionChange) {\n      const selectedItems = newSelectedRows\n        .map(idx => paginatedData[idx])\n        .filter((item): item is T => item !== undefined);\n      onSelectionChange(selectedItems);\n    }\n  };\n\n  // Status badge renderer\n  const renderStatusBadge = (status: string) => {\n    let bgColor = 'bg-gray-100 text-gray-800';\n\n    if (typeof status === 'string') {\n      const statusLower = status.toLowerCase();\n\n      if (statusLower.includes('active') || statusLower.includes('approved') ||\n          statusLower.includes('verified') || statusLower.includes('completed') ||\n          statusLower.includes('success')) {\n        bgColor = 'bg-green-100 text-green-800';\n      } else if (statusLower.includes('pending') || statusLower.includes('processing')) {\n        bgColor = 'bg-yellow-100 text-yellow-800';\n      } else if (statusLower.includes('rejected') || statusLower.includes('banned') ||\n                statusLower.includes('failed') || statusLower.includes('error')) {\n        bgColor = 'bg-red-100 text-red-800';\n      } else if (statusLower.includes('inactive')) {\n        bgColor = 'bg-gray-100 text-gray-800';\n      }\n    }\n\n    return (\n      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${bgColor}`}>\n        {status}\n      </span>\n    );\n  };\n\n  return (\n    <div\n      className={`bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden transition-all duration-300 hover:shadow-md ${className}`}\n      data-testid={testId}\n    >\n      {/* Header */}\n      {(title || description) && (\n        <div className={`px-6 py-4 border-b border-gray-100 ${headerClassName}`}>\n          {typeof title === 'string' ? (\n            <h3 className=\"text-lg font-semibold text-gray-800\">{title}</h3>\n          ) : (\n            title\n          )}\n          {typeof description === 'string' ? (\n            <p className=\"mt-1 text-sm text-gray-500\">{description}</p>\n          ) : (\n            description\n          )}\n        </div>\n      )}\n\n      {/* Search and Actions */}\n      <div className=\"p-4 border-b border-gray-100 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div className=\"relative flex-1\">\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <MagnifyingGlassIcon className=\"h-5 w-5 text-gray-400\" />\n          </div>\n          <input\n            type=\"text\"\n            placeholder=\"Search...\"\n            className=\"block w-full pl-10 pr-3 py-2 border border-gray-200 rounded-lg text-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200\"\n            value={searchTerm}\n            onChange={(e) => {\n              setSearchTerm(e.target.value);\n              setCurrentPage(1); // Reset to first page on search\n            }}\n            data-testid={`${testId}-search`}\n          />\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          {selectedRows.length > 0 && (\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-500\">{selectedRows.length} selected</span>\n              <button\n                className=\"px-3 py-1.5 bg-red-50 text-red-600 rounded-md text-sm font-medium hover:bg-red-100 transition-colors\"\n                onClick={() => {\n                  setSelectedRows([]);\n                  if (onSelectionChange) onSelectionChange([]);\n                }}\n                data-testid={`${testId}-clear-selection`}\n              >\n                Clear\n              </button>\n            </div>\n          )}\n          {actions}\n        </div>\n      </div>\n\n      {/* Table */}\n      <div className={`overflow-x-auto ${bodyClassName}`}>\n        {loading ? (\n          <div className=\"flex justify-center items-center py-20\">\n            <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-primary\"></div>\n          </div>\n        ) : (\n          <table className=\"min-w-full divide-y divide-gray-100\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                {selectable && (\n                  <th className=\"w-12 px-6 py-3\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"h-4 w-4 text-primary rounded border-gray-300 focus:ring-primary\"\n                      onChange={handleSelectAll}\n                      checked={selectedRows.length === paginatedData.length && paginatedData.length > 0}\n                      data-testid={`${testId}-select-all`}\n                    />\n                  </th>\n                )}\n                {columns.map((column) => (\n                  <th\n                    key={column.key}\n                    className={`px-6 py-3 text-${column.align || 'left'} text-xs font-medium text-gray-500 uppercase tracking-wider ${column.sortable ? 'cursor-pointer hover:bg-gray-100' : ''} transition-colors duration-200 ${column.width ? column.width : ''} ${column.className || ''}`}\n                    onClick={() => column.sortable && handleSort(column.key)}\n                    data-testid={`${testId}-column-${column.key}`}\n                  >\n                    <div className=\"flex items-center space-x-1\">\n                      <span>{column.label}</span>\n                      {column.sortable && (\n                        <span className={`transition-colors duration-200 ${\n                          sortConfig?.key === column.key ? 'text-primary' : 'text-gray-400'\n                        }`}>\n                          {sortConfig?.key === column.key && sortConfig.direction === 'asc'\n                            ? <ChevronUpIcon className=\"h-4 w-4\" />\n                            : sortConfig?.key === column.key && sortConfig.direction === 'desc'\n                              ? <ChevronDownIcon className=\"h-4 w-4\" />\n                              : <span className=\"text-gray-300\">↕</span>}\n                        </span>\n                      )}\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-100\">\n              {paginatedData.length > 0 ? (\n                paginatedData.map((row, index) => (\n                  <tr\n                    key={index}\n                    className={`group transition-all duration-200 ${\n                      onRowClick ? 'cursor-pointer' : ''\n                    } ${selectedRows.includes(index) ? 'bg-primary bg-opacity-5' : ''}\n                    ${hoveredRow === index ? 'bg-gray-50' : ''}\n                    ${rowClassName ? rowClassName(row, index) : ''}`}\n                    onClick={() => onRowClick && onRowClick(row)}\n                    onMouseEnter={() => setHoveredRow(index)}\n                    onMouseLeave={() => setHoveredRow(null)}\n                    data-testid={`${testId}-row-${index}`}\n                  >\n                    {selectable && (\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <input\n                          type=\"checkbox\"\n                          className=\"h-4 w-4 text-primary rounded border-gray-300 focus:ring-primary\"\n                          checked={selectedRows.includes(index)}\n                          onChange={() => {}} // Empty handler to avoid React warning about controlled component\n                          onClick={(e) => handleRowSelect(index, e)}\n                          data-testid={`${testId}-row-${index}-checkbox`}\n                        />\n                      </td>\n                    )}\n                    {columns.map((column) => (\n                      <td\n                        key={column.key}\n                        className={`px-6 py-4 whitespace-nowrap text-sm text-gray-600 group-hover:text-gray-900 text-${column.align || 'left'} ${column.className || ''}`}\n                        data-testid={`${testId}-row-${index}-cell-${column.key}`}\n                      >\n                        {column.render\n                          ? column.render(row[column.key], row)\n                          : column.key.toLowerCase().includes('status')\n                            ? renderStatusBadge(row[column.key])\n                            : row[column.key]}\n                      </td>\n                    ))}\n                  </tr>\n                ))\n              ) : (\n                <tr>\n                  <td\n                    colSpan={columns.length + (selectable ? 1 : 0)}\n                    className=\"px-6 py-10 text-center text-gray-500\"\n                    data-testid={`${testId}-empty-message`}\n                  >\n                    {emptyMessage}\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        )}\n      </div>\n\n      {/* Pagination */}\n      {pagination && totalPages > 1 && (\n        <div className={`px-6 py-4 border-t border-gray-100 flex items-center justify-between ${footerClassName}`}>\n          <div className=\"text-sm text-gray-500\">\n            Showing {((currentPage - 1) * pageSize) + 1} to {Math.min(currentPage * pageSize, filteredData.length)} of {filteredData.length} entries\n          </div>\n          <div className=\"flex space-x-1\">\n            <button\n              onClick={() => handlePageChange(Math.max(1, currentPage - 1))}\n              disabled={currentPage === 1}\n              className={`px-3 py-1 rounded-md text-sm ${\n                currentPage === 1\n                  ? 'text-gray-400 cursor-not-allowed'\n                  : 'text-gray-700 hover:bg-gray-100'\n              }`}\n              data-testid={`${testId}-pagination-prev`}\n            >\n              Previous\n            </button>\n            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n              // Show pages around current page\n              let pageNum: number;\n              if (totalPages <= 5) {\n                pageNum = i + 1;\n              } else if (currentPage <= 3) {\n                pageNum = i + 1;\n              } else if (currentPage >= totalPages - 2) {\n                pageNum = totalPages - 4 + i;\n              } else {\n                pageNum = currentPage - 2 + i;\n              }\n\n              return (\n                <button\n                  key={pageNum}\n                  onClick={() => handlePageChange(pageNum)}\n                  className={`px-3 py-1 rounded-md text-sm ${\n                    currentPage === pageNum\n                      ? 'bg-primary text-white'\n                      : 'text-gray-700 hover:bg-gray-100'\n                  }`}\n                  data-testid={`${testId}-pagination-${pageNum}`}\n                >\n                  {pageNum}\n                </button>\n              );\n            })}\n            <button\n              onClick={() => handlePageChange(Math.min(totalPages, currentPage + 1))}\n              disabled={currentPage === totalPages}\n              className={`px-3 py-1 rounded-md text-sm ${\n                currentPage === totalPages\n                  ? 'text-gray-400 cursor-not-allowed'\n                  : 'text-gray-700 hover:bg-gray-100'\n              }`}\n              data-testid={`${testId}-pagination-next`}\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(DataTable) as typeof DataTable;\n\n\n\n\n","/**\n * Button Component\n * \n * A reusable button component with various styles and states.\n */\n\nimport React, { memo } from 'react';\nimport type { ReactNode } from 'react';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'danger' | 'success' | 'text' | 'link';\nexport type ButtonSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n\nexport interface ButtonProps {\n  children: ReactNode;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  className?: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  type?: 'button' | 'submit' | 'reset';\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  loading?: boolean;\n  rounded?: boolean;\n  href?: string;\n  target?: string;\n  rel?: string;\n  title?: string;\n  ariaLabel?: string;\n  testId?: string;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  children,\n  variant = 'primary',\n  size = 'md',\n  className = '',\n  onClick,\n  disabled = false,\n  type = 'button',\n  icon,\n  iconPosition = 'left',\n  fullWidth = false,\n  loading = false,\n  rounded = false,\n  href,\n  target,\n  rel,\n  title,\n  ariaLabel,\n  testId,\n}) => {\n  const baseClasses = 'inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2';\n  \n  const variantClasses = {\n    primary: 'bg-primary text-white hover:bg-primary/90 focus:ring-primary',\n    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-300',\n    outline: 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50 focus:ring-primary',\n    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',\n    success: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500',\n    text: 'bg-transparent text-primary hover:bg-gray-100 focus:ring-primary',\n    link: 'bg-transparent text-primary hover:underline focus:ring-transparent p-0',\n  };\n  \n  const sizeClasses = {\n    xs: 'text-xs px-2 py-1',\n    sm: 'text-xs px-3 py-1.5',\n    md: 'text-sm px-4 py-2',\n    lg: 'text-base px-5 py-2.5',\n    xl: 'text-lg px-6 py-3',\n  };\n  \n  const disabledClasses = disabled ? 'opacity-60 cursor-not-allowed' : 'cursor-pointer';\n  const widthClass = fullWidth ? 'w-full' : '';\n  const roundedClass = rounded ? 'rounded-full' : 'rounded-lg';\n  \n  const buttonClasses = `\n    ${baseClasses}\n    ${variantClasses[variant]}\n    ${sizeClasses[size]}\n    ${disabledClasses}\n    ${widthClass}\n    ${roundedClass}\n    ${className}\n  `;\n  \n  const content = (\n    <>\n      {loading && (\n        <svg \n          className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-current\" \n          xmlns=\"http://www.w3.org/2000/svg\" \n          fill=\"none\" \n          viewBox=\"0 0 24 24\"\n          aria-hidden=\"true\"\n        >\n          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n        </svg>\n      )}\n      \n      {icon && iconPosition === 'left' && !loading && (\n        <span className=\"mr-2\">{icon}</span>\n      )}\n      \n      {children}\n      \n      {icon && iconPosition === 'right' && (\n        <span className=\"ml-2\">{icon}</span>\n      )}\n    </>\n  );\n  \n  // If href is provided, render an anchor tag\n  if (href) {\n    return (\n      <a\n        href={href}\n        className={buttonClasses}\n        target={target}\n        rel={rel || (target === '_blank' ? 'noopener noreferrer' : undefined)}\n        onClick={onClick}\n        title={title}\n        aria-label={ariaLabel}\n        data-testid={testId}\n      >\n        {content}\n      </a>\n    );\n  }\n  \n  // Otherwise render a button\n  return (\n    <button\n      type={type}\n      className={buttonClasses}\n      onClick={onClick}\n      disabled={disabled || loading}\n      title={title}\n      aria-label={ariaLabel}\n      data-testid={testId}\n    >\n      {content}\n    </button>\n  );\n};\n\nexport default memo(Button);\n","/**\n * Modal Component\n * \n * A reusable modal dialog component.\n */\n\nimport React, { Fragment, useEffect, useRef, memo } from 'react';\nimport type { ReactNode } from 'react';\nimport { XMarkIcon } from '@heroicons/react/24/outline';\nimport { createPortal } from 'react-dom';\n\nexport interface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string | ReactNode;\n  children: ReactNode;\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full';\n  footer?: ReactNode;\n  closeOnEsc?: boolean;\n  closeOnBackdropClick?: boolean;\n  showCloseButton?: boolean;\n  centered?: boolean;\n  className?: string;\n  bodyClassName?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n  backdropClassName?: string;\n  testId?: string;\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  title,\n  children,\n  size = 'md',\n  footer,\n  closeOnEsc = true,\n  closeOnBackdropClick = true,\n  showCloseButton = true,\n  centered = true,\n  className = '',\n  bodyClassName = '',\n  headerClassName = '',\n  footerClassName = '',\n  backdropClassName = '',\n  testId,\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null);\n  \n  // Handle Escape key press\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (closeOnEsc && e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      // Prevent scrolling on the body when modal is open\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'auto';\n    };\n  }, [isOpen, onClose, closeOnEsc]);\n  \n  // Focus trap inside modal\n  useEffect(() => {\n    if (!isOpen || !modalRef.current) return;\n    \n    const focusableElements = modalRef.current.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    \n    if (focusableElements.length === 0) return;\n    \n    const firstElement = focusableElements[0] as HTMLElement;\n    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\n    \n    const handleTabKey = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab') return;\n      \n      if (e.shiftKey) {\n        if (document.activeElement === firstElement) {\n          lastElement.focus();\n          e.preventDefault();\n        }\n      } else {\n        if (document.activeElement === lastElement) {\n          firstElement.focus();\n          e.preventDefault();\n        }\n      }\n    };\n    \n    document.addEventListener('keydown', handleTabKey);\n    firstElement.focus();\n    \n    return () => {\n      document.removeEventListener('keydown', handleTabKey);\n    };\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n  \n  // Size classes\n  const sizeClasses = {\n    xs: 'max-w-xs',\n    sm: 'max-w-md',\n    md: 'max-w-lg',\n    lg: 'max-w-2xl',\n    xl: 'max-w-4xl',\n    full: 'max-w-full mx-4',\n  };\n  \n  // Modal content\n  const modalContent = (\n    <Fragment>\n      {/* Backdrop */}\n      <div \n        className={`fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity ${backdropClassName}`}\n        onClick={closeOnBackdropClick ? onClose : undefined}\n        data-testid={`${testId}-backdrop`}\n      />\n\n      {/* Modal */}\n      <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n        <div className={`flex min-h-full items-${centered ? 'center' : 'start'} justify-center p-4 text-center`}>\n          <div \n            ref={modalRef}\n            className={`${sizeClasses[size]} w-full transform overflow-hidden rounded-lg bg-white text-left align-middle shadow-xl transition-all ${className}`}\n            onClick={(e) => e.stopPropagation()}\n            data-testid={testId}\n          >\n            {/* Header */}\n            <div className={`flex items-center justify-between px-6 py-4 border-b border-gray-100 ${headerClassName}`}>\n              {typeof title === 'string' ? (\n                <h3 className=\"text-lg font-semibold text-gray-800\">{title}</h3>\n              ) : (\n                title\n              )}\n              {showCloseButton && (\n                <button\n                  type=\"button\"\n                  className=\"text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-primary rounded-full p-1\"\n                  onClick={onClose}\n                  aria-label=\"Close modal\"\n                  data-testid={`${testId}-close-button`}\n                >\n                  <XMarkIcon className=\"h-6 w-6\" />\n                </button>\n              )}\n            </div>\n\n            {/* Content */}\n            <div className={`px-6 py-4 ${bodyClassName}`}>\n              {children}\n            </div>\n\n            {/* Footer */}\n            {footer && (\n              <div className={`px-6 py-4 bg-gray-50 border-t border-gray-100 flex justify-end space-x-3 ${footerClassName}`}>\n                {footer}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n  \n  // Use portal to render modal at the end of the document body\n  return createPortal(modalContent, document.body);\n};\n\nexport default memo(Modal);\n","/**\r\n * Orders Page\r\n *\r\n * This page displays and manages orders in the system.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport Card from '../components/common/Card';\r\nimport Button from '../components/common/Button';\r\nimport Modal from '../components/common/Modal';\r\nimport PageHeader from '../components/layout/PageHeader';\r\nimport { ArrowDownTrayIcon } from '@heroicons/react/24/outline';\r\nimport {\r\n  OrderList,\r\n  OrderDetails,\r\n  OrderFilter,\r\n  Order,\r\n  getMockOrders\r\n} from '../features/orders/index';\r\n\r\nconst OrdersPage: React.FC = () => {\r\n  // In a real implementation, we would use the useOrders hook\r\n  // const { orders, isLoading, updateOrderStatus, exportOrders } = useOrders();\r\n\r\n  const [activeFilter, setActiveFilter] = useState<'all' | 'pending' | 'approved' | 'completed' | 'rejected'>('all');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);\r\n  const [isOrderDetailsModalOpen, setIsOrderDetailsModalOpen] = useState(false);\r\n\r\n  // Use mock data from the centralized mock data file\r\n  const [orders] = useState<Order[]>(getMockOrders());\r\n\r\n  const filteredOrders = orders.filter(order => {\r\n    if (activeFilter === 'all') return true;\r\n    return order.status === activeFilter;\r\n  });\r\n\r\n  const handleOrderClick = (order: Order) => {\r\n    setSelectedOrder(order);\r\n    setIsOrderDetailsModalOpen(true);\r\n  };\r\n\r\n  const handleExportOrders = () => {\r\n    setIsLoading(true);\r\n    // Simulate export process\r\n    setTimeout(() => {\r\n      setIsLoading(false);\r\n      console.log('Exporting orders...');\r\n    }, 1500);\r\n  };\r\n\r\n  const handleUpdateOrderStatus = (orderId: string, newStatus: 'pending' | 'approved' | 'rejected' | 'completed') => {\r\n    // In a real implementation, we would call the updateOrderStatus function from the useOrders hook\r\n    console.log(`Updating order ${orderId} status to ${newStatus}`);\r\n    setIsOrderDetailsModalOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <PageHeader\r\n        title=\"Orders\"\r\n        description=\"Manage and track all orders in the system\"\r\n        actions={\r\n          <Button\r\n            variant=\"outline\"\r\n            icon={<ArrowDownTrayIcon className=\"h-5 w-5\" />}\r\n            onClick={handleExportOrders}\r\n            loading={isLoading}\r\n          >\r\n            Export Orders\r\n          </Button>\r\n        }\r\n      />\r\n\r\n      <Card>\r\n        <OrderFilter\r\n          activeFilter={activeFilter}\r\n          onFilterChange={setActiveFilter}\r\n        />\r\n\r\n        <OrderList\r\n          orders={filteredOrders}\r\n          onOrderClick={handleOrderClick}\r\n          title={`${activeFilter.charAt(0).toUpperCase() + activeFilter.slice(1)} Orders (${filteredOrders.length})`}\r\n        />\r\n      </Card>\r\n\r\n      {/* Order Details Modal */}\r\n      {selectedOrder && (\r\n        <Modal\r\n          isOpen={isOrderDetailsModalOpen}\r\n          onClose={() => setIsOrderDetailsModalOpen(false)}\r\n          title=\"Order Details\"\r\n          size=\"lg\"\r\n          footer={\r\n            <>\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => setIsOrderDetailsModalOpen(false)}\r\n              >\r\n                Close\r\n              </Button>\r\n              {selectedOrder.status === 'pending' && (\r\n                <>\r\n                  <Button\r\n                    variant=\"danger\"\r\n                    onClick={() => handleUpdateOrderStatus(selectedOrder.id, 'rejected')}\r\n                  >\r\n                    Reject\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"success\"\r\n                    onClick={() => handleUpdateOrderStatus(selectedOrder.id, 'approved')}\r\n                  >\r\n                    Approve\r\n                  </Button>\r\n                </>\r\n              )}\r\n              {selectedOrder.status === 'approved' && (\r\n                <Button\r\n                  variant=\"primary\"\r\n                  onClick={() => handleUpdateOrderStatus(selectedOrder.id, 'completed')}\r\n                >\r\n                  Mark as Completed\r\n                </Button>\r\n              )}\r\n            </>\r\n          }\r\n        >\r\n          <OrderDetails order={selectedOrder} />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrdersPage;"],"names":["Card","_ref","title","subtitle","children","className","bodyClassName","headerClassName","footerClassName","icon","footer","onClick","hoverable","noPadding","bordered","loading","testId","cardClasses","headerClasses","bodyClasses","footerClasses","_jsxs","_jsx","memo","formatDate","dateString","options","arguments","length","undefined","date","Date","defaultOptions","year","month","day","Intl","DateTimeFormat","format","error","console","formatCurrency","amount","currency","locale","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","toFixed","status","type","_type","statusKey","toLowerCase","colorClass","CheckCircleIcon","ClockIcon","XCircleIcon","TruckIcon","ExclamationCircleIcon","formattedStatus","charAt","toUpperCase","slice","ArrowDownTrayIcon","svgRef","titleId","props","React","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","data","columns","onRowClick","pagination","emptyMessage","DataTable","MagnifyingGlassIcon","ChevronUpIcon","description","pageSize","CONFIG","DEFAULT_PAGE_SIZE","selectable","onSelectionChange","actions","rowClassName","initialSortKey","initialSortDirection","sortConfig","setSortConfig","useState","key","direction","searchTerm","setSearchTerm","currentPage","setCurrentPage","selectedRows","setSelectedRows","hoveredRow","setHoveredRow","sortedData","useMemo","sort","a","b","aValue","bValue","localeCompare","filteredData","filter","row","entries","some","_ref2","_key","value","String","includes","totalPages","Math","ceil","paginatedData","startIndex","handlePageChange","page","renderStatusBadge","bgColor","statusLower","placeholder","onChange","e","target","event","newSelectedRows","checked","Array","from","_","i","selectedItems","map","idx","item","column","align","sortable","width","handleSort","label","ChevronDownIcon","index","onMouseEnter","onMouseLeave","handleRowSelect","stopPropagation","indexOf","splice","push","render","colSpan","min","max","disabled","pageNum","Button","variant","size","iconPosition","fullWidth","rounded","href","rel","ariaLabel","buttonClasses","primary","secondary","outline","danger","success","text","link","xs","sm","md","lg","xl","content","_Fragment","cx","cy","r","Modal","isOpen","onClose","closeOnEsc","closeOnBackdropClick","showCloseButton","centered","backdropClassName","modalRef","useRef","useEffect","handleEscape","document","addEventListener","body","overflow","removeEventListener","current","focusableElements","querySelectorAll","firstElement","lastElement","handleTabKey","shiftKey","activeElement","focus","preventDefault","modalContent","Fragment","full","XMarkIcon","createPortal","OrdersPage","activeFilter","setActiveFilter","isLoading","setIsLoading","selectedOrder","setSelectedOrder","isOrderDetailsModalOpen","setIsOrderDetailsModalOpen","orders","getMockOrders","filteredOrders","order","handleUpdateOrderStatus","orderId","newStatus","log","PageHeader","handleExportOrders","setTimeout","OrderFilter","onFilterChange","OrderList","onOrderClick","OrderDetails"],"sourceRoot":""}