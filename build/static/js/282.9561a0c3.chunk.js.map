{"version":3,"file":"static/js/282.9561a0c3.chunk.js","mappings":"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","sources":["hooks/useEntityData.ts","../node_modules/@heroicons/react/24/outline/esm/PlusIcon.js","features/categories/components/CategoryList.tsx","features/categories/components/AddCategoryForm.tsx","components/common/TreeView.tsx","features/categories/components/CategoryTree.tsx","features/categories/api/categoriesApi.ts","features/categories/hooks/useCategories.ts","pages/CategoriesPage.tsx","components/layout/PageHeader.tsx","../node_modules/@heroicons/react/24/outline/esm/ChevronRightIcon.js","components/common/Modal.tsx"],"sourcesContent":["import { useState, useCallback, useEffect, useRef } from 'react';\r\nimport useNotification from './useNotification';\r\n\r\nexport interface EntityApi<T, IdType = string> {\r\n  getAll: (params?: any) => Promise<T[]>;\r\n  getById: (id: IdType) => Promise<T>;\r\n  create: (data: any) => Promise<T>;\r\n  update: (id: IdType, data: any) => Promise<T>;\r\n  delete: (id: IdType) => Promise<void>;\r\n}\r\n\r\nexport interface UseEntityDataOptions {\r\n  entityName: string;\r\n  initialFetch?: boolean;\r\n}\r\n\r\nexport const useEntityData = <T, IdType = string>(\r\n  apiService: EntityApi<T, IdType>,\r\n  options: UseEntityDataOptions\r\n) => {\r\n  const [entities, setEntities] = useState<T[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const { showNotification } = useNotification();\r\n\r\n  // Use refs to store current values and avoid stale closures\r\n  const apiServiceRef = useRef(apiService);\r\n  const showNotificationRef = useRef(showNotification);\r\n  const entityNameRef = useRef(options.entityName);\r\n  const hasInitialFetched = useRef(false);\r\n\r\n  // Update refs when values change\r\n  useEffect(() => {\r\n    apiServiceRef.current = apiService;\r\n    showNotificationRef.current = showNotification;\r\n    entityNameRef.current = options.entityName;\r\n  });\r\n\r\n  const fetchEntities = useCallback(async (params?: any) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const data = await apiServiceRef.current.getAll(params);\r\n      setEntities(data);\r\n      return data;\r\n    } catch (err) {\r\n      const error = err as Error;\r\n      setError(error);\r\n      showNotificationRef.current({\r\n        type: 'error',\r\n        title: 'Error',\r\n        message: `Failed to fetch ${entityNameRef.current}`\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []); // No dependencies needed due to refs\r\n\r\n  const getEntityById = useCallback(async (id: IdType) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const entity = await apiServiceRef.current.getById(id);\r\n      return entity;\r\n    } catch (err) {\r\n      const error = err as Error;\r\n      setError(error);\r\n      showNotificationRef.current({\r\n        type: 'error',\r\n        title: 'Error',\r\n        message: `Failed to fetch ${entityNameRef.current}`\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []); // No dependencies needed due to refs\r\n\r\n  // Other common methods (create, update, delete)\r\n\r\n  // Initial fetch effect - runs only once\r\n  useEffect(() => {\r\n    if (options.initialFetch !== false && !hasInitialFetched.current) {\r\n      console.log(`[useEntityData] Starting initial fetch for ${options.entityName}`);\r\n      hasInitialFetched.current = true;\r\n\r\n      const initialFetch = async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n          console.log(`[useEntityData] Calling API for ${options.entityName}`);\r\n          const data = await apiService.getAll();\r\n          console.log(`[useEntityData] Received data for ${options.entityName}:`, data);\r\n          setEntities(data);\r\n        } catch (err) {\r\n          const error = err as Error;\r\n          console.error(`[useEntityData] Error fetching ${options.entityName}:`, error);\r\n          setError(error);\r\n          showNotification({\r\n            type: 'error',\r\n            title: 'Error',\r\n            message: `Failed to fetch ${options.entityName}`\r\n          });\r\n        } finally {\r\n          console.log(`[useEntityData] Finished fetch for ${options.entityName}`);\r\n          setIsLoading(false);\r\n        }\r\n      };\r\n\r\n      initialFetch();\r\n    }\r\n  }, []); // Empty dependency array - runs only once on mount\r\n\r\n  return {\r\n    entities,\r\n    isLoading,\r\n    error,\r\n    fetchEntities,\r\n    getEntityById,\r\n    // Other methods\r\n  };\r\n};","import * as React from \"react\";\nfunction PlusIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 4.5v15m7.5-7.5h-15\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(PlusIcon);\nexport default ForwardRef;","/**\n * Category List Component\n * \n * This component displays a list of categories in a data table.\n */\n\nimport React from 'react';\nimport DataTable from '../../../components/common/DataTable';\nimport type{ Category } from '../types/index';\nimport { \n  CheckCircleIcon, \n  XCircleIcon,\n  PencilIcon,\n  TrashIcon,\n  EyeIcon\n} from '@heroicons/react/24/outline';\n\ninterface CategoryListProps {\n  categories: Category[];\n  onCategoryClick: (category: Category) => void;\n  onViewCategory?: (category: Category) => void;\n  onEditCategory?: (category: Category) => void;\n  onDeleteCategory?: (category: Category) => void;\n  title?: string;\n  loading?: boolean;\n}\n\nconst CategoryList: React.FC<CategoryListProps> = ({\n  categories,\n  onCategoryClick,\n  onViewCategory,\n  onEditCategory,\n  onDeleteCategory,\n  title = 'Categories',\n  loading = false\n}) => {\n  const columns = [\n    { \n      key: 'id', \n      label: 'ID', \n      sortable: true,\n      render: (value: string) => (\n        <span className=\"text-xs text-gray-500\">{value}</span>\n      )\n    },\n    { \n      key: 'name', \n      label: 'Name', \n      sortable: true,\n      render: (value: string) => (\n        <span className=\"font-medium text-gray-900\">{value}</span>\n      )\n    },\n    { key: 'description', label: 'Description', sortable: true },\n    { \n      key: 'productCount', \n      label: 'Products', \n      sortable: true,\n      render: (value: number) => (\n        <span className=\"font-medium\">{value}</span>\n      )\n    },\n    { \n      key: 'status', \n      label: 'Status', \n      sortable: true,\n      render: (value: string) => {\n        return (\n          <div className=\"flex items-center\">\n            {value === 'active' ? (\n              <CheckCircleIcon className=\"w-4 h-4 text-green-500 mr-1\" />\n            ) : (\n              <XCircleIcon className=\"w-4 h-4 text-red-500 mr-1\" />\n            )}\n            <span>{value.charAt(0).toUpperCase() + value.slice(1)}</span>\n          </div>\n        );\n      }\n    },\n    { key: 'createdAt', label: 'Created At', sortable: true },\n    {\n      key: 'actions',\n      label: 'Actions',\n      render: (_: any, category: Category) => (\n        <div className=\"flex items-center space-x-2\">\n          {onViewCategory && (\n            <button\n              className=\"p-1 text-gray-500 hover:text-primary rounded-full hover:bg-gray-100\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onViewCategory(category);\n              }}\n            >\n              <EyeIcon className=\"w-5 h-5\" />\n            </button>\n          )}\n          {onEditCategory && (\n            <button\n              className=\"p-1 text-gray-500 hover:text-blue-600 rounded-full hover:bg-gray-100\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onEditCategory(category);\n              }}\n            >\n              <PencilIcon className=\"w-5 h-5\" />\n            </button>\n          )}\n          {onDeleteCategory && (\n            <button\n              className=\"p-1 text-gray-500 hover:text-red-600 rounded-full hover:bg-gray-100\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onDeleteCategory(category);\n              }}\n            >\n              <TrashIcon className=\"w-5 h-5\" />\n            </button>\n          )}\n        </div>\n      )\n    }\n  ];\n\n  return (\n    <DataTable\n      columns={columns}\n      data={categories}\n      onRowClick={onCategoryClick}\n      title={title}\n      pagination={true}\n      loading={loading}\n    />\n  );\n};\n\nexport default CategoryList;\n","/**\n * Add Category Form Component\n * \n * This component provides a form for adding new categories.\n */\n\nimport React, { useState } from 'react';\nimport Button from '../../../components/common/Button';\nimport type { CategoryFormData, Category } from '../types/index';\nimport { validateForm, validationRules } from '../../../utils/validation';\n\ninterface AddCategoryFormProps {\n  onSubmit: (categoryData: CategoryFormData) => void;\n  onCancel: () => void;\n  isLoading?: boolean;\n  parentCategories?: Category[];\n}\n\nconst AddCategoryForm: React.FC<AddCategoryFormProps> = ({\n  onSubmit,\n  onCancel,\n  isLoading = false,\n  parentCategories = []\n}) => {\n  const [formData, setFormData] = useState<CategoryFormData>({\n    name: '',\n    description: '',\n    status: 'active',\n    parentCategoryId: ''\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    \n    // Clear error when field is edited\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const validateFormData = () => {\n    const validationErrors = validateForm({\n      name: formData.name,\n      description: formData.description\n    }, {\n      name: [validationRules.required('Category name is required')],\n      description: [validationRules.required('Description is required')]\n    });\n\n    setErrors(validationErrors);\n    return Object.keys(validationErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (validateFormData()) {\n      onSubmit(formData);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        <div>\n          <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\n            Category Name <span className=\"text-red-500\">*</span>\n          </label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm ${\n              errors.name ? 'border-red-300' : ''\n            }`}\n          />\n          {errors.name && <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>}\n        </div>\n\n        <div>\n          <label htmlFor=\"description\" className=\"block text-sm font-medium text-gray-700\">\n            Description <span className=\"text-red-500\">*</span>\n          </label>\n          <textarea\n            id=\"description\"\n            name=\"description\"\n            rows={3}\n            value={formData.description}\n            onChange={handleChange}\n            className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm ${\n              errors.description ? 'border-red-300' : ''\n            }`}\n          />\n          {errors.description && <p className=\"mt-1 text-sm text-red-600\">{errors.description}</p>}\n        </div>\n\n        <div>\n          <label htmlFor=\"status\" className=\"block text-sm font-medium text-gray-700\">\n            Status\n          </label>\n          <select\n            id=\"status\"\n            name=\"status\"\n            value={formData.status}\n            onChange={handleChange}\n            className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm\"\n          >\n            <option value=\"active\">Active</option>\n            <option value=\"inactive\">Inactive</option>\n          </select>\n        </div>\n\n        <div>\n          <label htmlFor=\"parentCategoryId\" className=\"block text-sm font-medium text-gray-700\">\n            Parent Category\n          </label>\n          <select\n            id=\"parentCategoryId\"\n            name=\"parentCategoryId\"\n            value={formData.parentCategoryId}\n            onChange={handleChange}\n            className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm\"\n          >\n            <option value=\"\">None (Top Level Category)</option>\n            {parentCategories.map((category) => (\n              <option key={category.id} value={category.id}>\n                {category.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-3\">\n        <Button \n          type=\"button\" \n          variant=\"outline\" \n          onClick={onCancel}\n          disabled={isLoading}\n        >\n          Cancel\n        </Button>\n        <Button \n          type=\"submit\" \n          loading={isLoading}\n        >\n          Add Category\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default AddCategoryForm;\n","import React, { useState } from 'react';\r\nimport { ChevronRightIcon, ChevronDownIcon } from '@heroicons/react/24/outline';\r\n\r\nexport interface TreeNode {\r\n  id: string;\r\n  name: string;\r\n  children?: TreeNode[];\r\n  [key: string]: any;\r\n}\r\n\r\ninterface TreeViewProps {\r\n  data: TreeNode[];\r\n  onNodeSelect: (node: TreeNode) => void;\r\n  selectedNodeId?: string;\r\n  className?: string;\r\n}\r\n\r\nconst TreeView: React.FC<TreeViewProps> = ({\r\n  data,\r\n  onNodeSelect,\r\n  selectedNodeId,\r\n  className = ''\r\n}) => {\r\n  const [expandedNodes, setExpandedNodes] = useState<Record<string, boolean>>({});\r\n  \r\n  const toggleNode = (nodeId: string) => {\r\n    setExpandedNodes(prev => ({\r\n      ...prev,\r\n      [nodeId]: !prev[nodeId]\r\n    }));\r\n  };\r\n  \r\n  const renderNode = (node: TreeNode, level = 0) => {\r\n    const hasChildren = node.children && node.children.length > 0;\r\n    const isExpanded = expandedNodes[node.id];\r\n    const isSelected = node.id === selectedNodeId;\r\n    \r\n    return (\r\n      <div key={node.id}>\r\n        <div \r\n          className={`flex items-center py-2 px-3 hover:bg-gray-100 cursor-pointer ${\r\n            isSelected ? 'bg-primary bg-opacity-10 text-primary' : ''\r\n          }`}\r\n          style={{ paddingLeft: `${level * 1.5 + 0.75}rem` }}\r\n        >\r\n          {hasChildren ? (\r\n            <button\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n                toggleNode(node.id);\r\n              }}\r\n              className=\"mr-1 p-1 rounded-full hover:bg-gray-200 focus:outline-none\"\r\n            >\r\n              {isExpanded ? (\r\n                <ChevronDownIcon className=\"h-4 w-4 text-gray-500\" />\r\n              ) : (\r\n                <ChevronRightIcon className=\"h-4 w-4 text-gray-500\" />\r\n              )}\r\n            </button>\r\n          ) : (\r\n            <span className=\"w-6\" /> // Spacer for alignment\r\n          )}\r\n          \r\n          <div \r\n            className=\"flex-1 truncate\"\r\n            onClick={() => onNodeSelect(node)}\r\n          >\r\n            {node.name}\r\n          </div>\r\n        </div>\r\n        \r\n        {hasChildren && isExpanded && (\r\n          <div>\r\n            {node.children!.map(child => renderNode(child, level + 1))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  return (\r\n    <div className={`border rounded-md overflow-hidden ${className}`}>\r\n      {data.map(node => renderNode(node))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeView;","import React, { useMemo } from 'react';\r\nimport TreeView, { type TreeNode } from '../../../components/common/TreeView';\r\nimport type { Category } from '../types';\r\n\r\ninterface CategoryTreeProps {\r\n  categories: Category[];\r\n  onCategorySelect: (category: Category) => void;\r\n  selectedCategoryId?: string | undefined;\r\n  className?: string;\r\n}\r\n\r\nconst CategoryTree: React.FC<CategoryTreeProps> = ({\r\n  categories,\r\n  onCategorySelect,\r\n  selectedCategoryId,\r\n  className = ''\r\n}) => {\r\n  // Transform categories into tree structure\r\n  const categoryTree = useMemo(() => {\r\n    // Create a map for quick lookup\r\n    const categoryMap = new Map<string, Category & { children: Category[] }>();\r\n    \r\n    // Initialize each category with an empty children array\r\n    categories.forEach(category => {\r\n      categoryMap.set(category.id, { ...category, children: [] });\r\n    });\r\n    \r\n    // Build the tree structure\r\n    const rootCategories: (Category & { children: Category[] })[] = [];\r\n    \r\n    categoryMap.forEach(category => {\r\n      if (category.parentId) {\r\n        // This is a child category\r\n        const parent = categoryMap.get(category.parentId);\r\n        if (parent) {\r\n          parent.children.push(category);\r\n        } else {\r\n          // Parent not found, add to root\r\n          rootCategories.push(category);\r\n        }\r\n      } else {\r\n        // This is a root category\r\n        rootCategories.push(category);\r\n      }\r\n    });\r\n    \r\n    return rootCategories;\r\n  }, [categories]);\r\n  \r\n  // Transform to TreeNode format\r\n  const treeData: TreeNode[] = useMemo(() => {\r\n    const mapCategoryToTreeNode = (\r\n      category: Category & { children: Category[] }\r\n    ): TreeNode => ({\r\n      id: category.id,\r\n      name: category.name,\r\n      children: category.children.map(child => mapCategoryToTreeNode({ ...child, children: [] })),\r\n      originalData: category\r\n    });\r\n    \r\n    return categoryTree.map((root) => mapCategoryToTreeNode(root));\r\n  }, [categoryTree]);\r\n  \r\n  const handleNodeSelect = (node: TreeNode) => {\r\n    onCategorySelect(node['originalData']);\r\n  };\r\n  return (\r\n    <TreeView\r\n      data={treeData}\r\n      onNodeSelect={handleNodeSelect}\r\n      selectedNodeId={selectedCategoryId || ''}\r\n      className={className}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CategoryTree;\r\n","/**\n * Categories API Service\n * \n * This file provides methods for interacting with the categories API endpoints.\n */\n\nimport apiClient from '../../../api';\nimport type { Category, CategoryFormData } from '../types';\n\nexport const categoriesApi = {\n  /**\n   * Get all categories\n   */\n  getCategories: async (params?: Record<string, any>): Promise<Category[]> => {\n    try {\n      const response = await apiClient.get<Category[]>('/categories', { params });\n      if (!response.data) {\n        throw new Error('No categories data received');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get a category by ID\n   */\n  getCategoryById: async (id: string): Promise<Category> => {\n    try {\n      const response = await apiClient.get<Category>(`/categories/${id}`);\n      if (!response.data) {\n        throw new Error(`No category data received for ID: ${id}`);\n      }\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching category ${id}:`, error);\n      throw error;\n    }\n  },\n\n  /**\n   * Create a new category\n   */\n  createCategory: async (categoryData: CategoryFormData): Promise<Category> => {\n    try {\n      const response = await apiClient.post<Category>('/categories', categoryData);\n      if (!response.data) {\n        throw new Error('Failed to create category');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error creating category:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Update a category\n   */\n  updateCategory: async (id: string, categoryData: Partial<CategoryFormData>): Promise<Category> => {\n    try {\n      const response = await apiClient.put<Category>(`/categories/${id}`, categoryData);\n      if (!response.data) {\n        throw new Error(`Failed to update category ${id}`);\n      }\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating category ${id}:`, error);\n      throw error;\n    }\n  },\n\n  /**\n   * Delete a category\n   */\n  deleteCategory: async (id: string): Promise<void> => {\n    try {\n      await apiClient.delete(`/categories/${id}`);\n    } catch (error) {\n      console.error(`Error deleting category ${id}:`, error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get subcategories for a parent category\n   */\n  getSubcategories: async (parentId: string): Promise<Category[]> => {\n    try {\n      const response = await apiClient.get<Category[]>('/categories', { params: { parentId } });\n      if (!response.data) {\n        throw new Error(`No subcategories found for parent ID: ${parentId}`);\n      }\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching subcategories for parent ${parentId}:`, error);\n      throw error;\n    }\n  }\n};\n\nexport default categoriesApi;\n","/**\n * Categories Hook\n * \n * This hook provides methods and state for working with categories.\n */\n\nimport { useCallback } from 'react';\nimport { useEntityData } from '../../../hooks/useEntityData';\nimport categoriesApi from '../api/categoriesApi';\nimport type { Category } from '../types';\nimport useNotification from '../../../hooks/useNotification';\n\nexport const useCategories = (options = { initialFetch: true }) => {\n  const baseHook = useEntityData({\n    getAll: categoriesApi.getCategories,\n    getById: categoriesApi.getCategoryById,\n    create: categoriesApi.createCategory,\n    update: categoriesApi.updateCategory,\n    delete: categoriesApi.deleteCategory\n  }, {\n    entityName: 'categories',\n    initialFetch: options.initialFetch\n  });\n  \n  const { showNotification: _showNotification } = useNotification();\n  \n  // Category-specific methods\n  const getCategoryHierarchy = useCallback(() => {\n    // Get parent categories (those without parentId)\n    const parentCategories = (baseHook.entities as Category[]).filter(\n      (category) => !category.parentId\n    );\n    \n    // Create a map for quick lookup\n    const categoryMap = new Map<string, Category & { subcategories: Category[] }>();\n    \n    // Initialize parent categories with empty subcategories array\n    parentCategories.forEach(category => {\n      categoryMap.set(category.id, { ...category as Category, subcategories: [] });\n    });\n\n    // Add subcategories to their parents\n    (baseHook.entities as Category[]).forEach((category) => {\n      if (category.parentId) {\n        const parent = categoryMap.get(category.parentId);\n        if (parent) {\n          parent.subcategories.push(category);\n        }\n      }\n    });\n    \n    return Array.from(categoryMap.values());\n  }, [baseHook.entities]);\n  \n  return {\n    ...baseHook,\n    categories: baseHook.entities as Category[],\n    fetchCategories: baseHook.fetchEntities,\n    getCategoryById: baseHook.getEntityById,\n    getCategoryHierarchy\n  };\n};\n\nexport default useCategories;\n\n\n\n","/**\r\n * Categories Page\r\n *\r\n * This page displays and manages categories in the system.\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport PageHeader from '../components/layout/PageHeader';\r\nimport Card from '../components/common/Card';\r\nimport Button from '../components/common/Button';\r\nimport Modal from '../components/common/Modal';\r\nimport { PlusIcon } from '@heroicons/react/24/outline';\r\nimport { \r\n  CategoryList, \r\n  CategoryTree,\r\n\r\n  AddCategoryForm,\r\n  useCategories,\r\n  Category\r\n} from '../features/categories';\r\nimport { ROUTES } from '../constants/routes';\r\nimport useNotification from '../hooks/useNotification';\r\n\r\nconst CategoriesPage: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { categories, isLoading, fetchCategories, getCategoryHierarchy: _getCategoryHierarchy } = useCategories();\r\n  const { showNotification } = useNotification();\r\n  \r\n  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);\r\n  const [isAddCategoryModalOpen, setIsAddCategoryModalOpen] = useState(false);\r\n  const [viewMode, setViewMode] = useState<'list' | 'tree'>('list');\r\n  \r\n  const handleCategoryClick = (category: Category) => {\r\n    setSelectedCategory(category);\r\n    navigate(ROUTES.getCategoryDetailsRoute(category.id));\r\n  };\r\n  \r\n  const handleAddCategory = async (_categoryData: any) => {\r\n    try {\r\n      // Implementation\r\n      setIsAddCategoryModalOpen(false);\r\n      await fetchCategories();\r\n      showNotification({\r\n        type: 'success',\r\n        title: 'Success',\r\n        message: 'Category added successfully'\r\n      });\r\n    } catch (error) {\r\n      showNotification({\r\n        type: 'error',\r\n        title: 'Error',\r\n        message: 'Failed to add category'\r\n      });\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <PageHeader\r\n        title=\"Categories\"\r\n        description=\"Manage product categories\"\r\n        actions={\r\n          <div className=\"flex space-x-3\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setViewMode(viewMode === 'list' ? 'tree' : 'list')}\r\n            >\r\n              {viewMode === 'list' ? 'Tree View' : 'List View'}\r\n            </Button>\r\n            <Button\r\n              icon={<PlusIcon className=\"h-5 w-5\" />}\r\n              onClick={() => setIsAddCategoryModalOpen(true)}\r\n            >\r\n              Add Category\r\n            </Button>\r\n          </div>\r\n        }\r\n      />\r\n      \r\n      <Card>\r\n        {viewMode === 'list' ? (\r\n          <CategoryList\r\n            categories={categories}\r\n            onCategoryClick={handleCategoryClick}\r\n            loading={isLoading}\r\n          />\r\n        ) : (\r\n          <CategoryTree\r\n            categories={categories}\r\n            onCategorySelect={handleCategoryClick}\r\n            selectedCategoryId={selectedCategory?.id}\r\n          />\r\n        )}\r\n      </Card>\r\n      \r\n      <Modal\r\n        isOpen={isAddCategoryModalOpen}\r\n        onClose={() => setIsAddCategoryModalOpen(false)}\r\n        title=\"Add Category\"\r\n      >\r\n        <AddCategoryForm\r\n          onSubmit={handleAddCategory}\r\n          onCancel={() => setIsAddCategoryModalOpen(false)}\r\n          parentCategories={categories.filter(c => !c.parentId)}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategoriesPage;\r\n","/**\n * PageHeader Component\n * \n * A consistent header component for pages with title, description, and actions.\n */\n\nimport React, { memo } from 'react';\nimport type { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ChevronRightIcon, HomeIcon } from '@heroicons/react/24/outline';\n\nexport interface BreadcrumbItem {\n  label: string;\n  path?: string;\n}\n\nexport interface PageHeaderProps {\n  title: string;\n  description?: string | ReactNode;\n  actions?: ReactNode;\n  breadcrumbs?: BreadcrumbItem[];\n  className?: string;\n  testId?: string;\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({\n  title,\n  description,\n  actions,\n  breadcrumbs,\n  className = '',\n  testId,\n}) => {\n  return (\n    <div \n      className={`mb-6 ${className}`}\n      data-testid={testId}\n    >\n      {/* Breadcrumbs */}\n      {breadcrumbs && breadcrumbs.length > 0 && (\n        <nav className=\"flex mb-4\" aria-label=\"Breadcrumb\">\n          <ol className=\"flex items-center space-x-1 text-sm text-gray-500\">\n            <li>\n              <Link \n                to=\"/\" \n                className=\"flex items-center hover:text-primary\"\n                aria-label=\"Home\"\n              >\n                <HomeIcon className=\"h-4 w-4\" />\n              </Link>\n            </li>\n            \n            {breadcrumbs.map((item, index) => (\n              <li key={index} className=\"flex items-center\">\n                <ChevronRightIcon className=\"h-4 w-4 mx-1 text-gray-400\" />\n                {item.path && index < breadcrumbs.length - 1 ? (\n                  <Link \n                    to={item.path} \n                    className=\"hover:text-primary\"\n                  >\n                    {item.label}\n                  </Link>\n                ) : (\n                  <span className=\"font-medium text-gray-700\">{item.label}</span>\n                )}\n              </li>\n            ))}\n          </ol>\n        </nav>\n      )}\n      \n      {/* Header Content */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">{title}</h1>\n          {description && typeof description === 'string' ? (\n            <p className=\"mt-1 text-sm text-gray-500\">{description}</p>\n          ) : (\n            description\n          )}\n        </div>\n        \n        {actions && (\n          <div className=\"flex flex-wrap gap-3 mt-2 sm:mt-0\">\n            {actions}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PageHeader);\n","import * as React from \"react\";\nfunction ChevronRightIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m8.25 4.5 7.5 7.5-7.5 7.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChevronRightIcon);\nexport default ForwardRef;","/**\n * Modal Component\n * \n * A reusable modal dialog component.\n */\n\nimport React, { Fragment, useEffect, useRef, memo } from 'react';\nimport type { ReactNode } from 'react';\nimport { XMarkIcon } from '@heroicons/react/24/outline';\nimport { createPortal } from 'react-dom';\n\nexport interface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string | ReactNode;\n  children: ReactNode;\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full';\n  footer?: ReactNode;\n  closeOnEsc?: boolean;\n  closeOnBackdropClick?: boolean;\n  showCloseButton?: boolean;\n  centered?: boolean;\n  className?: string;\n  bodyClassName?: string;\n  headerClassName?: string;\n  footerClassName?: string;\n  backdropClassName?: string;\n  testId?: string;\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  title,\n  children,\n  size = 'md',\n  footer,\n  closeOnEsc = true,\n  closeOnBackdropClick = true,\n  showCloseButton = true,\n  centered = true,\n  className = '',\n  bodyClassName = '',\n  headerClassName = '',\n  footerClassName = '',\n  backdropClassName = '',\n  testId,\n}) => {\n  const modalRef = useRef<HTMLDivElement>(null);\n  \n  // Handle Escape key press\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (closeOnEsc && e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      // Prevent scrolling on the body when modal is open\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'auto';\n    };\n  }, [isOpen, onClose, closeOnEsc]);\n  \n  // Focus trap inside modal\n  useEffect(() => {\n    if (!isOpen || !modalRef.current) return;\n    \n    const focusableElements = modalRef.current.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    \n    if (focusableElements.length === 0) return;\n    \n    const firstElement = focusableElements[0] as HTMLElement;\n    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;\n    \n    const handleTabKey = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab') return;\n      \n      if (e.shiftKey) {\n        if (document.activeElement === firstElement) {\n          lastElement.focus();\n          e.preventDefault();\n        }\n      } else {\n        if (document.activeElement === lastElement) {\n          firstElement.focus();\n          e.preventDefault();\n        }\n      }\n    };\n    \n    document.addEventListener('keydown', handleTabKey);\n    firstElement.focus();\n    \n    return () => {\n      document.removeEventListener('keydown', handleTabKey);\n    };\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n  \n  // Size classes\n  const sizeClasses = {\n    xs: 'max-w-xs',\n    sm: 'max-w-md',\n    md: 'max-w-lg',\n    lg: 'max-w-2xl',\n    xl: 'max-w-4xl',\n    full: 'max-w-full mx-4',\n  };\n  \n  // Modal content\n  const modalContent = (\n    <Fragment>\n      {/* Backdrop */}\n      <div \n        className={`fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity ${backdropClassName}`}\n        onClick={closeOnBackdropClick ? onClose : undefined}\n        data-testid={`${testId}-backdrop`}\n      />\n\n      {/* Modal */}\n      <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n        <div className={`flex min-h-full items-${centered ? 'center' : 'start'} justify-center p-4 text-center`}>\n          <div \n            ref={modalRef}\n            className={`${sizeClasses[size]} w-full transform overflow-hidden rounded-lg bg-white text-left align-middle shadow-xl transition-all ${className}`}\n            onClick={(e) => e.stopPropagation()}\n            data-testid={testId}\n          >\n            {/* Header */}\n            <div className={`flex items-center justify-between px-6 py-4 border-b border-gray-100 ${headerClassName}`}>\n              {typeof title === 'string' ? (\n                <h3 className=\"text-lg font-semibold text-gray-800\">{title}</h3>\n              ) : (\n                title\n              )}\n              {showCloseButton && (\n                <button\n                  type=\"button\"\n                  className=\"text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-primary rounded-full p-1\"\n                  onClick={onClose}\n                  aria-label=\"Close modal\"\n                  data-testid={`${testId}-close-button`}\n                >\n                  <XMarkIcon className=\"h-6 w-6\" />\n                </button>\n              )}\n            </div>\n\n            {/* Content */}\n            <div className={`px-6 py-4 ${bodyClassName}`}>\n              {children}\n            </div>\n\n            {/* Footer */}\n            {footer && (\n              <div className={`px-6 py-4 bg-gray-50 border-t border-gray-100 flex justify-end space-x-3 ${footerClassName}`}>\n                {footer}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n  \n  // Use portal to render modal at the end of the document body\n  return createPortal(modalContent, document.body);\n};\n\nexport default memo(Modal);\n"],"names":["useEntityData","apiService","options","entities","setEntities","useState","isLoading","setIsLoading","error","setError","showNotification","useNotification","apiServiceRef","useRef","showNotificationRef","entityNameRef","entityName","hasInitialFetched","useEffect","current","fetchEntities","useCallback","async","data","getAll","params","err","type","title","message","getEntityById","getById","id","initialFetch","console","log","PlusIcon","_ref","svgRef","titleId","props","React","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","strokeLinecap","strokeLinejoin","d","categories","onCategoryClick","onViewCategory","onEditCategory","onDeleteCategory","loading","columns","key","label","sortable","render","value","_jsx","className","children","_jsxs","CheckCircleIcon","XCircleIcon","charAt","toUpperCase","slice","_","category","onClick","e","stopPropagation","EyeIcon","PencilIcon","TrashIcon","DataTable","onRowClick","pagination","onSubmit","onCancel","parentCategories","formData","setFormData","name","description","status","parentCategoryId","errors","setErrors","handleChange","target","prev","preventDefault","validateFormData","validationErrors","validateForm","validationRules","required","keys","length","htmlFor","onChange","rows","map","Button","variant","disabled","onNodeSelect","selectedNodeId","expandedNodes","setExpandedNodes","renderNode","node","level","arguments","undefined","hasChildren","isExpanded","isSelected","style","paddingLeft","nodeId","ChevronDownIcon","ChevronRightIcon","child","onCategorySelect","selectedCategoryId","categoryTree","useMemo","categoryMap","Map","forEach","set","rootCategories","parentId","parent","get","push","treeData","mapCategoryToTreeNode","originalData","root","TreeView","getCategories","response","apiClient","Error","getCategoryById","createCategory","post","categoryData","updateCategory","put","deleteCategory","delete","getSubcategories","baseHook","categoriesApi","create","update","_showNotification","getCategoryHierarchy","filter","subcategories","Array","from","values","fetchCategories","CategoriesPage","navigate","useNavigate","_getCategoryHierarchy","useCategories","selectedCategory","setSelectedCategory","isAddCategoryModalOpen","setIsAddCategoryModalOpen","viewMode","setViewMode","handleCategoryClick","ROUTES","getCategoryDetailsRoute","PageHeader","actions","icon","Card","CategoryList","CategoryTree","Modal","isOpen","onClose","AddCategoryForm","c","breadcrumbs","testId","Link","to","HomeIcon","item","index","path","memo","size","footer","closeOnEsc","closeOnBackdropClick","showCloseButton","centered","bodyClassName","headerClassName","footerClassName","backdropClassName","modalRef","handleEscape","document","addEventListener","body","overflow","removeEventListener","focusableElements","querySelectorAll","firstElement","lastElement","handleTabKey","shiftKey","activeElement","focus","modalContent","Fragment","xs","sm","md","lg","xl","full","XMarkIcon","createPortal"],"sourceRoot":""}