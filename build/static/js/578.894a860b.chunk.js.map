{"version":3,"file":"static/js/578.894a860b.chunk.js","mappings":"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","sources":["features/orders/components/OrderList.tsx","features/orders/components/OrderDetails.tsx","features/orders/components/OrderFilter.tsx","features/orders/api/ordersApi.ts","features/orders/hooks/useOrders.ts","features/orders/utils/orderMappers.ts","components/layout/PageHeader.tsx","../node_modules/@heroicons/react/24/outline/esm/UserIcon.js","../node_modules/@heroicons/react/24/outline/esm/ChevronRightIcon.js","../node_modules/@heroicons/react/24/outline/esm/CalendarIcon.js","../node_modules/@heroicons/react/24/outline/esm/BuildingOffice2Icon.js"],"sourcesContent":["/**\n * Order List Component\n * \n * This component displays a list of orders in a data table.\n */\n\nimport React from 'react';\nimport BaseEntityList from '../../../components/common/EntityList/BaseEntityList';\nimport StatusBadge from '../../../components/common/StatusBadge';\nimport type { Column } from '../../../components/common/DataTable';\nimport type { Order } from '../types';\nimport { formatCurrency } from '../../../utils/formatters';\n\ninterface OrderListProps {\n  orders: Order[];\n  onOrderClick: (order: Order) => void;\n  title?: string;\n  loading?: boolean;\n}\n\nconst OrderList: React.FC<OrderListProps> = ({\n  orders,\n  onOrderClick,\n  title = 'Orders',\n  loading = false\n}) => {\n  const columns: Column<Order>[] = [\n    { \n      key: 'id', \n      label: 'Order ID', \n      sortable: true,\n      render: (value: string) => (\n        <span className=\"font-medium text-primary\">{value}</span>\n      )\n    },\n    { key: 'customerName', label: 'Customer', sortable: true },\n    { key: 'supplierName', label: 'Supplier', sortable: true },\n    { \n      key: 'totalAmount', \n      label: 'Total Amount', \n      sortable: true,\n      render: (value: number) => formatCurrency(value)\n    },\n    {\n      key: 'status',\n      label: 'Status',\n      sortable: true,\n      render: (value: string) => (\n        <StatusBadge status={value} type=\"order\" />\n      )\n    },\n    { key: 'orderDate', label: 'Order Date', sortable: true },\n    { key: 'deliveryDate', label: 'Delivery Date', sortable: true },\n  ];\n\n  return (\n    <BaseEntityList<Order>\n      data={orders}\n      columns={columns}\n      onRowClick={onOrderClick}\n      title={title}\n      pagination={true}\n      loading={loading}\n      emptyMessage=\"No orders found\"\n    />\n  );\n};\n\nexport default OrderList;\n\n","/**\n * Order Details Component\n * \n * This component displays detailed information about an order.\n */\n\nimport React from 'react';\nimport type{ Order, OrderItem } from '../types/index';\nimport { formatCurrency, formatDate } from '../../../utils/formatters';\nimport { \n  CheckCircleIcon, \n  ClockIcon, \n  XCircleIcon,\n  TruckIcon,\n  CalendarIcon,\n  UserIcon,\n  BuildingOffice2Icon,\n\n} from '@heroicons/react/24/outline';\n\ninterface OrderDetailsProps {\n  order: Order;\n}\n\nconst OrderDetails: React.FC<OrderDetailsProps> = ({ order }) => {\n  // Helper function to get status icon\n  const getStatusIcon = (status: string) => {\n    switch(status) {\n      case 'pending':\n        return <ClockIcon className=\"w-5 h-5 text-yellow-500\" />;\n      case 'approved':\n        return <CheckCircleIcon className=\"w-5 h-5 text-blue-500\" />;\n      case 'completed':\n        return <TruckIcon className=\"w-5 h-5 text-green-500\" />;\n      case 'rejected':\n        return <XCircleIcon className=\"w-5 h-5 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  // Helper function to get status color class\n  const getStatusColorClass = (status: string) => {\n    switch(status) {\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'approved':\n        return 'bg-blue-100 text-blue-800';\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-medium text-gray-900\">Order #{order.id}</h3>\n          <div className=\"mt-1\">\n            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColorClass(order.status)}`}>\n              {getStatusIcon(order.status)}\n              <span className=\"ml-1\">{order.status.charAt(0).toUpperCase() + order.status.slice(1)}</span>\n            </span>\n          </div>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-sm text-gray-500\">Total Amount</div>\n          <div className=\"text-xl font-bold text-primary\">{formatCurrency(order.totalAmount)}</div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-start\">\n            <UserIcon className=\"w-5 h-5 text-gray-400 mt-0.5 mr-2\" />\n            <div>\n              <div className=\"text-sm font-medium text-gray-500\">Customer</div>\n              <div className=\"text-sm text-gray-900\">{order.customerName}</div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-start\">\n            <BuildingOffice2Icon className=\"w-5 h-5 text-gray-400 mt-0.5 mr-2\" />\n            <div>\n              <div className=\"text-sm font-medium text-gray-500\">Supplier</div>\n              <div className=\"text-sm text-gray-900\">{order.supplierName}</div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div className=\"flex items-start\">\n            <CalendarIcon className=\"w-5 h-5 text-gray-400 mt-0.5 mr-2\" />\n            <div>\n              <div className=\"text-sm font-medium text-gray-500\">Order Date</div>\n              <div className=\"text-sm text-gray-900\">{formatDate(order.orderDate)}</div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-start\">\n            <TruckIcon className=\"w-5 h-5 text-gray-400 mt-0.5 mr-2\" />\n            <div>\n              <div className=\"text-sm font-medium text-gray-500\">Delivery Date</div>\n              <div className=\"text-sm text-gray-900\">{formatDate(order.deliveryDate)}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {order.items && order.items.length > 0 && (\n        <div className=\"mt-6\">\n          <h4 className=\"text-sm font-medium text-gray-500 mb-3\">Order Items</h4>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Item\n                  </th>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Quantity\n                  </th>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Unit Price\n                  </th>\n                  <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Total\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {order.items.map((item: OrderItem) => (\n                  <tr key={item.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {item.name}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {item.quantity}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {formatCurrency(item.unitPrice)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {formatCurrency(item.quantity * item.unitPrice)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n              <tfoot>\n                <tr>\n                  <td colSpan={3} className=\"px-6 py-4 text-right text-sm font-medium text-gray-900\">\n                    Total\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-bold text-primary\">\n                    {formatCurrency(order.totalAmount)}\n                  </td>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OrderDetails;\n","/**\n * Order Filter Component\n * \n * This component provides filtering options for orders.\n */\n\nimport React from 'react';\nimport Button from '../../../components/common/Button';\n\ninterface OrderFilterProps {\n  activeFilter: 'all' | 'pending' | 'approved' | 'completed' | 'rejected';\n  onFilterChange: (filter: 'all' | 'pending' | 'approved' | 'completed' | 'rejected') => void;\n}\n\nconst OrderFilter: React.FC<OrderFilterProps> = ({\n  activeFilter,\n  onFilterChange\n}) => {\n  return (\n    <div className=\"flex flex-wrap gap-3 mb-6\">\n      <Button\n        variant={activeFilter === 'all' ? 'primary' : 'outline'}\n        size=\"sm\"\n        onClick={() => onFilterChange('all')}\n      >\n        All Orders\n      </Button>\n      <Button\n        variant={activeFilter === 'pending' ? 'primary' : 'outline'}\n        size=\"sm\"\n        onClick={() => onFilterChange('pending')}\n      >\n        Pending\n      </Button>\n      <Button\n        variant={activeFilter === 'approved' ? 'primary' : 'outline'}\n        size=\"sm\"\n        onClick={() => onFilterChange('approved')}\n      >\n        Approved\n      </Button>\n      <Button\n        variant={activeFilter === 'completed' ? 'primary' : 'outline'}\n        size=\"sm\"\n        onClick={() => onFilterChange('completed')}\n      >\n        Completed\n      </Button>\n      <Button\n        variant={activeFilter === 'rejected' ? 'primary' : 'outline'}\n        size=\"sm\"\n        onClick={() => onFilterChange('rejected')}\n      >\n        Rejected\n      </Button>\n    </div>\n  );\n};\n\nexport default OrderFilter;\n","/**\n * Orders API Service\n * \n * This file provides methods for interacting with the orders API endpoints.\n */\n\nimport apiClient from '../../../api';\nimport type { Order, OrderUpdateData } from '../types';\n\nexport const ordersApi = {\n  /**\n   * Get all orders\n   */\n  getOrders: async (params?: Record<string, any>): Promise<Order[]> => {\n    try {\n      const response = await apiClient.get<Order[]>('/orders', { params });\n      if (!response.data) {\n        throw new Error('No orders data received');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get an order by ID\n   */\n  getOrderById: async (id: string): Promise<Order> => {\n    try {\n      const response = await apiClient.get<Order>(`/orders/${id}`);\n      if (!response.data) {\n        throw new Error(`No order data received for ID: ${id}`);\n      }\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching order ${id}:`, error);\n      throw error;\n    }\n  },\n\n  /**\n   * Create a new order\n   */\n  createOrder: async (orderData: OrderUpdateData): Promise<Order> => {\n    try {\n      const response = await apiClient.post<Order>('/orders', orderData);\n      if (!response.data) {\n        throw new Error('Failed to create order');\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error creating order:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Update an order\n   */\n  updateOrder: async (id: string, orderData: Partial<OrderUpdateData>): Promise<Order> => {\n    try {\n      const response = await apiClient.put<Order>(`/orders/${id}`, orderData);\n      if (!response.data) {\n        throw new Error(`Failed to update order ${id}`);\n      }\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating order ${id}:`, error);\n      throw error;\n    }\n  },\n\n  /**\n   * Delete an order\n   */\n  deleteOrder: async (id: string): Promise<void> => {\n    try {\n      await apiClient.delete(`/orders/${id}`);\n    } catch (error) {\n      console.error(`Error deleting order ${id}:`, error);\n      throw error;\n    }\n  },\n\n  /**\n   * Update order status\n   */\n  updateOrderStatus: async (id: string, status: Order['status']): Promise<Order> => {\n    try {\n      const response = await apiClient.put<Order>(`/orders/${id}/status`, { status });\n      if (!response.data) {\n        throw new Error(`Failed to update status for order ${id}`);\n      }\n      return response.data;\n    } catch (error) {\n      console.error(`Error updating status for order ${id}:`, error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get orders by status\n   */\n  getOrdersByStatus: async (status: Order['status']): Promise<Order[]> => {\n    try {\n      const response = await apiClient.get<Order[]>('/orders', { params: { status } });\n      if (!response.data) {\n        throw new Error(`No orders found with status: ${status}`);\n      }\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching orders with status ${status}:`, error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get orders by customer\n   */\n  getOrdersByCustomer: async (customerId: string): Promise<Order[]> => {\n    try {\n      const response = await apiClient.get<Order[]>('/orders', { params: { customerId } });\n      if (!response.data) {\n        throw new Error(`No orders found for customer: ${customerId}`);\n      }\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching orders for customer ${customerId}:`, error);\n      throw error;\n    }\n  }\n};\n\nexport default ordersApi;\n\n","/**\n * Orders Hook\n * \n * This hook provides methods and state for working with orders.\n */\n\nimport { useState, useCallback, useEffect } from 'react';\nimport type { Order, OrderUpdateData } from '../types/index';\nimport ordersApi from '../api/ordersApi';\nimport useNotification from '../../../hooks/useNotification';\n\nexport const useOrders = () => {\n  const [orders, setOrders] = useState<Order[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const { showNotification } = useNotification();\n\n  // Fetch all orders\n  const fetchOrders = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const data = await ordersApi.getOrders();\n      setOrders(data);\n    } catch (err) {\n      setError(err as Error);\n      showNotification({\n        type: 'error',\n        title: 'Error',\n        message: 'Failed to fetch orders'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [showNotification]);\n\n  // Get an order by ID\n  const getOrderById = useCallback(async (id: string) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const order = await ordersApi.getOrderById(id);\n      return order;\n    } catch (err) {\n      setError(err as Error);\n      showNotification({\n        type: 'error',\n        title: 'Error',\n        message: `Failed to fetch order ${id}`\n      });\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [showNotification]);\n\n  // Update an order\n  const updateOrder = useCallback(async (id: string, orderData: OrderUpdateData) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const updatedOrder = await ordersApi.updateOrder(id, orderData);\n      setOrders(prevOrders => \n        prevOrders.map(order => order.id === id ? updatedOrder : order)\n      );\n      showNotification({\n        type: 'success',\n        title: 'Success',\n        message: 'Order updated successfully'\n      });\n      return updatedOrder;\n    } catch (err) {\n      setError(err as Error);\n      showNotification({\n        type: 'error',\n        title: 'Error',\n        message: 'Failed to update order'\n      });\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [showNotification]);\n\n  // Cancel an order\n  const cancelOrder = useCallback(async (id: string) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const cancelledOrder = await ordersApi.updateOrderStatus(id, 'rejected');\n      setOrders(prevOrders => \n        prevOrders.map(order => order.id === id ? cancelledOrder : order)\n      );\n      showNotification({\n        type: 'success',\n        title: 'Success',\n        message: 'Order cancelled successfully'\n      });\n      return cancelledOrder;\n    } catch (err) {\n      setError(err as Error);\n      showNotification({\n        type: 'error',\n        title: 'Error',\n        message: 'Failed to cancel order'\n      });\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [showNotification]);\n\n  // Get orders by status\n  const getOrdersByStatus = useCallback(async (status: Order['status']) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const filteredOrders = await ordersApi.getOrdersByStatus(status);\n      return filteredOrders;\n    } catch (err) {\n      setError(err as Error);\n      showNotification({\n        type: 'error',\n        title: 'Error',\n        message: `Failed to fetch orders with status ${status}`\n      });\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [showNotification]);\n\n  // Get orders by customer\n  const getOrdersByCustomer = useCallback(async (customerId: string) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const customerOrders = await ordersApi.getOrdersByCustomer(customerId);\n      return customerOrders;\n    } catch (err) {\n      setError(err as Error);\n      showNotification({\n        type: 'error',\n        title: 'Error',\n        message: `Failed to fetch orders for customer ${customerId}`\n      });\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [showNotification]);\n\n  // Load orders on mount\n  useEffect(() => {\n    fetchOrders();\n  }, [fetchOrders]);\n\n  return {\n    orders,\n    isLoading,\n    error,\n    fetchOrders,\n    getOrderById,\n    updateOrder,\n    cancelOrder,\n    getOrdersByStatus,\n    getOrdersByCustomer\n  };\n};\n\nexport default useOrders;\n\n","/**\n * Order Mappers\n * \n * Utility functions to map between different order data formats\n */\n\nimport type{ Order, OrderItem } from '../types/index';\nimport { orders as mockOrders, type OrderItem as MockOrderItem } from '../../../mockData/entities/orders';\n\n/**\n * Maps a mock order item to the application order item format\n */\nconst mapMockOrderItemToOrderItem = (mockItem: MockOrderItem): OrderItem => {\n  return {\n    id: mockItem.id,\n    name: mockItem.productName,\n    quantity: mockItem.quantity,\n    unitPrice: mockItem.unitPrice,\n    sku: mockItem.productId\n  };\n};\n\n/**\n * Maps a mock order to the application order format\n */\nexport const mapMockOrderToOrder = (mockOrder: any): Order => {\n  const formatDate = (dateString?: string): string => {\n    if (!dateString) return new Date().toISOString().split('T')[0]!;\n    return new Date(dateString).toISOString().split('T')[0]!;\n  };\n\n  return {\n    id: mockOrder.orderNumber || mockOrder.id,\n    customerName: mockOrder.customerName,\n    supplierName: mockOrder.supplierName,\n    totalAmount: mockOrder.totalAmount,\n    status: mockOrder.status === 'cancelled' ? 'rejected' : mockOrder.status, // Map 'cancelled' to 'rejected' for compatibility\n    orderDate: formatDate(mockOrder.orderDate),\n    deliveryDate: formatDate(mockOrder.deliveryDate),\n    items: mockOrder.items ? mockOrder.items.map(mapMockOrderItemToOrderItem) : [],\n    ...(mockOrder.shippingAddress && {\n      shippingAddress: {\n        street: mockOrder.shippingAddress.street,\n        city: mockOrder.shippingAddress.city,\n        state: mockOrder.shippingAddress.state,\n        postalCode: mockOrder.shippingAddress.zipCode,\n        country: mockOrder.shippingAddress.country\n      }\n    }),\n    notes: mockOrder.notes\n  };\n};\n\n/**\n * Get all orders from mock data\n */\nexport const getMockOrders = (): Order[] => {\n  return mockOrders.map(mapMockOrderToOrder);\n};\n\n/**\n * Get an order by ID from mock data\n */\nexport const getMockOrderById = (id: string): Order | undefined => {\n  // Try to find by orderNumber first, then by id\n  const mockOrder = mockOrders.find(o => o.orderNumber === id || o.id === id);\n  if (!mockOrder) return undefined;\n  return mapMockOrderToOrder(mockOrder);\n};\n\nexport default {\n  mapMockOrderToOrder,\n  getMockOrders,\n  getMockOrderById\n};\n","/**\n * PageHeader Component\n * \n * A consistent header component for pages with title, description, and actions.\n */\n\nimport React, { memo } from 'react';\nimport type { ReactNode } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ChevronRightIcon, HomeIcon } from '@heroicons/react/24/outline';\n\nexport interface BreadcrumbItem {\n  label: string;\n  path?: string;\n}\n\nexport interface PageHeaderProps {\n  title: string;\n  description?: string | ReactNode;\n  actions?: ReactNode;\n  breadcrumbs?: BreadcrumbItem[];\n  className?: string;\n  testId?: string;\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({\n  title,\n  description,\n  actions,\n  breadcrumbs,\n  className = '',\n  testId,\n}) => {\n  return (\n    <div \n      className={`mb-6 ${className}`}\n      data-testid={testId}\n    >\n      {/* Breadcrumbs */}\n      {breadcrumbs && breadcrumbs.length > 0 && (\n        <nav className=\"flex mb-4\" aria-label=\"Breadcrumb\">\n          <ol className=\"flex items-center space-x-1 text-sm text-gray-500\">\n            <li>\n              <Link \n                to=\"/\" \n                className=\"flex items-center hover:text-primary\"\n                aria-label=\"Home\"\n              >\n                <HomeIcon className=\"h-4 w-4\" />\n              </Link>\n            </li>\n            \n            {breadcrumbs.map((item, index) => (\n              <li key={index} className=\"flex items-center\">\n                <ChevronRightIcon className=\"h-4 w-4 mx-1 text-gray-400\" />\n                {item.path && index < breadcrumbs.length - 1 ? (\n                  <Link \n                    to={item.path} \n                    className=\"hover:text-primary\"\n                  >\n                    {item.label}\n                  </Link>\n                ) : (\n                  <span className=\"font-medium text-gray-700\">{item.label}</span>\n                )}\n              </li>\n            ))}\n          </ol>\n        </nav>\n      )}\n      \n      {/* Header Content */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-800\">{title}</h1>\n          {description && typeof description === 'string' ? (\n            <p className=\"mt-1 text-sm text-gray-500\">{description}</p>\n          ) : (\n            description\n          )}\n        </div>\n        \n        {actions && (\n          <div className=\"flex flex-wrap gap-3 mt-2 sm:mt-0\">\n            {actions}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PageHeader);\n","import * as React from \"react\";\nfunction UserIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M15.75 6a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0ZM4.501 20.118a7.5 7.5 0 0 1 14.998 0A17.933 17.933 0 0 1 12 21.75c-2.676 0-5.216-.584-7.499-1.632Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(UserIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ChevronRightIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m8.25 4.5 7.5 7.5-7.5 7.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChevronRightIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction CalendarIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(CalendarIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction BuildingOffice2Icon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M2.25 21h19.5m-18-18v18m10.5-18v18m6-13.5V21M6.75 6.75h.75m-.75 3h.75m-.75 3h.75m3-6h.75m-.75 3h.75m-.75 3h.75M6.75 21v-3.375c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21M3 3h12m-.75 4.5H21m-3.75 3.75h.008v.008h-.008v-.008Zm0 3h.008v.008h-.008v-.008Zm0 3h.008v.008h-.008v-.008Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(BuildingOffice2Icon);\nexport default ForwardRef;"],"names":["_ref","orders","onOrderClick","title","loading","columns","key","label","sortable","render","value","_jsx","className","children","formatCurrency","StatusBadge","status","type","BaseEntityList","data","onRowClick","pagination","emptyMessage","order","_jsxs","id","getStatusColorClass","ClockIcon","CheckCircleIcon","TruckIcon","XCircleIcon","getStatusIcon","charAt","toUpperCase","slice","totalAmount","UserIcon","customerName","BuildingOffice2Icon","supplierName","CalendarIcon","formatDate","orderDate","deliveryDate","items","length","scope","map","item","name","quantity","unitPrice","colSpan","activeFilter","onFilterChange","Button","variant","size","onClick","getOrders","async","response","apiClient","get","params","Error","error","console","getOrderById","createOrder","post","orderData","updateOrder","put","deleteOrder","delete","updateOrderStatus","getOrdersByStatus","getOrdersByCustomer","customerId","useOrders","setOrders","useState","isLoading","setIsLoading","setError","showNotification","useNotification","fetchOrders","useCallback","ordersApi","err","message","updatedOrder","prevOrders","cancelOrder","cancelledOrder","useEffect","mapMockOrderItemToOrderItem","mockItem","productName","sku","productId","mapMockOrderToOrder","mockOrder","dateString","Date","toISOString","split","orderNumber","shippingAddress","street","city","state","postalCode","zipCode","country","notes","getMockOrders","mockOrders","PageHeader","description","actions","breadcrumbs","testId","Link","to","HomeIcon","index","ChevronRightIcon","path","memo","svgRef","titleId","props","React","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","strokeLinecap","strokeLinejoin","d"],"sourceRoot":""}