{"version":3,"file":"static/js/107.cf7531d5.chunk.js","mappings":"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","sources":["components/common/FormField.tsx","../node_modules/@heroicons/react/24/outline/esm/PhotoIcon.js","components/common/ImageUpload.tsx","mockData/entities/businessTypes.ts","features/users/api/businessTypesApi.ts","features/users/components/AddUserForm.tsx","features/users/components/EditUserForm.tsx","components/common/DetailSection.tsx","components/common/DetailList.tsx","components/common/DetailItem.tsx","components/common/OrdersSection.tsx","features/users/components/UserDetails.tsx","features/users/components/UserList.tsx","components/analytics/MetricsSection.tsx","components/analytics/ChartSection.tsx","features/users/components/UserAnalytics.tsx","features/users/api/usersApi.ts","features/users/hooks/useUsers.ts","features/users/utils/userMappers.ts","hooks/useEntityData.ts","../node_modules/@heroicons/react/24/outline/esm/CurrencyDollarIcon.js","features/analytics/components/MetricCard.tsx","utils/formatters.ts","components/common/StatusBadge.tsx","components/common/EntityList/BaseEntityList.tsx","../node_modules/@heroicons/react/24/outline/esm/TruckIcon.js","../node_modules/@heroicons/react/24/outline/esm/ClockIcon.js","features/analytics/components/BarChart.tsx","../node_modules/@heroicons/react/24/outline/esm/EnvelopeIcon.js"],"sourcesContent":["import React from 'react';\r\n\r\ninterface FormFieldProps {\r\n  label: string;\r\n  name: string;\r\n  type?: string;\r\n  value: any;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void;\r\n  error?: string | undefined;\r\n  required?: boolean;\r\n  placeholder?: string;\r\n  options?: { value: string; label: string }[];\r\n  className?: string;\r\n  disabled?: boolean;\r\n  loading?: boolean;\r\n}\r\n\r\nconst FormField: React.FC<FormFieldProps> = ({\r\n  label,\r\n  name,\r\n  type = 'text',\r\n  value,\r\n  onChange,\r\n  error,\r\n  required = false,\r\n  placeholder = '',\r\n  options = [],\r\n  className = '',\r\n  disabled = false,\r\n  loading = false\r\n}) => {\r\n  const inputClasses = `mt-1 block w-full rounded-md shadow-sm sm:text-sm ${\r\n    error ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : 'border-gray-300 focus:border-primary focus:ring-primary'\r\n  }`;\r\n  \r\n  const renderField = () => {\r\n    switch (type) {\r\n      case 'textarea':\r\n        return (\r\n          <textarea\r\n            id={name}\r\n            name={name}\r\n            value={value}\r\n            onChange={onChange}\r\n            className={inputClasses}\r\n            placeholder={placeholder}\r\n            disabled={disabled}\r\n          />\r\n        );\r\n      \r\n      case 'select':\r\n        return (\r\n          <select\r\n            id={name}\r\n            name={name}\r\n            value={value}\r\n            onChange={onChange}\r\n            className={inputClasses}\r\n            disabled={disabled || loading}\r\n          >\r\n            {loading ? (\r\n              <option value=\"\">Loading...</option>\r\n            ) : (\r\n              options.map(option => (\r\n                <option key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </option>\r\n              ))\r\n            )}\r\n          </select>\r\n        );\r\n      \r\n      case 'checkbox':\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            id={name}\r\n            name={name}\r\n            checked={value}\r\n            onChange={onChange}\r\n            className=\"h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary\"\r\n            disabled={disabled}\r\n          />\r\n        );\r\n      \r\n      default:\r\n        return (\r\n          <input\r\n            type={type}\r\n            id={name}\r\n            name={name}\r\n            value={value}\r\n            onChange={onChange}\r\n            className={inputClasses}\r\n            placeholder={placeholder}\r\n            disabled={disabled}\r\n          />\r\n        );\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className={`${className}`}>\r\n      <label htmlFor={name} className=\"block text-sm font-medium text-gray-700\">\r\n        {label} {required && <span className=\"text-red-500\">*</span>}\r\n      </label>\r\n      {renderField()}\r\n      {error && <p className=\"mt-1 text-sm text-red-600\">{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormField;\r\n","import * as React from \"react\";\nfunction PhotoIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m2.25 15.75 5.159-5.159a2.25 2.25 0 0 1 3.182 0l5.159 5.159m-1.5-1.5 1.409-1.409a2.25 2.25 0 0 1 3.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 0 0 1.5-1.5V6a1.5 1.5 0 0 0-1.5-1.5H3.75A1.5 1.5 0 0 0 2.25 6v12a1.5 1.5 0 0 0 1.5 1.5Zm10.5-11.25h.008v.008h-.008V8.25Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(PhotoIcon);\nexport default ForwardRef;","/**\n * Image Upload Component\n * \n * A reusable component for uploading and previewing images with drag and drop support.\n */\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { PhotoIcon, XMarkIcon } from '@heroicons/react/24/outline';\nimport { validateFile } from '../../utils/errorHandling';\n\ninterface ImageUploadProps {\n  label: string;\n  name: string;\n  value?: File | string | null;\n  onChange: (file: File | null) => void;\n  error?: string | undefined;\n  required?: boolean;\n  disabled?: boolean;\n  maxSize?: number; // in bytes\n  allowedTypes?: string[];\n  className?: string;\n}\n\nconst ImageUpload: React.FC<ImageUploadProps> = ({\n  label,\n  name,\n  value,\n  onChange,\n  error,\n  required = false,\n  disabled = false,\n  maxSize = 5 * 1024 * 1024, // 5MB default\n  allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n  className = ''\n}) => {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [preview, setPreview] = useState<string | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  // Generate preview URL when value changes\n  React.useEffect(() => {\n    if (value instanceof File) {\n      const url = URL.createObjectURL(value);\n      setPreview(url);\n      return () => URL.revokeObjectURL(url);\n    } else if (typeof value === 'string' && value) {\n      setPreview(value);\n      return;\n    } else {\n      setPreview(null);\n      return;\n    }\n  }, [value]);\n\n  const handleFileSelect = useCallback((file: File) => {\n    const validation = validateFile(file, {\n      maxSize,\n      allowedTypes\n    });\n\n    if (validation.valid) {\n      onChange(file);\n    } else {\n      // Handle validation error - you might want to show this error\n      console.error('File validation failed:', validation.error);\n    }\n  }, [maxSize, allowedTypes, onChange]);\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      handleFileSelect(file);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    if (!disabled) {\n      setIsDragOver(true);\n    }\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    if (disabled) return;\n\n    const file = e.dataTransfer.files?.[0];\n    if (file) {\n      handleFileSelect(file);\n    }\n  };\n\n  const handleRemove = () => {\n    onChange(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleClick = () => {\n    if (!disabled && fileInputRef.current) {\n      fileInputRef.current.click();\n    }\n  };\n\n  return (\n    <div className={className}>\n      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n        {label} {required && <span className=\"text-red-500\">*</span>}\n      </label>\n      \n      <div\n        className={`\n          relative border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors\n          ${isDragOver ? 'border-primary bg-primary bg-opacity-5' : 'border-gray-300'}\n          ${error ? 'border-red-300' : ''}\n          ${disabled ? 'opacity-50 cursor-not-allowed' : 'hover:border-primary hover:bg-gray-50'}\n        `}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        onClick={handleClick}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          name={name}\n          accept={allowedTypes.join(',')}\n          onChange={handleFileInputChange}\n          className=\"hidden\"\n          disabled={disabled}\n        />\n\n        {preview ? (\n          <div className=\"relative\">\n            <img\n              src={preview}\n              alt=\"Preview\"\n              className=\"mx-auto h-32 w-32 object-cover rounded-lg\"\n            />\n            {!disabled && (\n              <button\n                type=\"button\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleRemove();\n                }}\n                className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors\"\n              >\n                <XMarkIcon className=\"h-4 w-4\" />\n              </button>\n            )}\n          </div>\n        ) : (\n          <div>\n            <PhotoIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <div className=\"mt-4\">\n              <p className=\"text-sm text-gray-600\">\n                {isDragOver ? 'Drop image here' : 'Click to upload or drag and drop'}\n              </p>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                PNG, JPG, GIF up to {Math.round(maxSize / 1024 / 1024)}MB\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {error && <p className=\"mt-1 text-sm text-red-600\">{error}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","/**\n * Mock Business Types Data\n * \n * This file contains mock data for business types in the ConnectChain admin panel.\n */\n\nexport interface BusinessType {\n  id: string;\n  name: string;\n  description?: string;\n}\n\nexport const businessTypes: BusinessType[] = [\n  {\n    id: '1',\n    name: 'Retail',\n    description: 'Businesses that sell products directly to consumers'\n  },\n  {\n    id: '2',\n    name: 'Wholesale',\n    description: 'Businesses that sell products in bulk to other businesses'\n  },\n  {\n    id: '3',\n    name: 'Manufacturing',\n    description: 'Businesses that produce goods from raw materials'\n  },\n  {\n    id: '4',\n    name: 'Technology',\n    description: 'Businesses focused on technology products and services'\n  },\n  {\n    id: '5',\n    name: 'Healthcare',\n    description: 'Businesses providing medical and health-related services'\n  },\n  {\n    id: '6',\n    name: 'Food & Beverage',\n    description: 'Businesses in the food and beverage industry'\n  },\n  {\n    id: '7',\n    name: 'Automotive',\n    description: 'Businesses related to vehicles and automotive services'\n  },\n  {\n    id: '8',\n    name: 'Construction',\n    description: 'Businesses involved in building and construction'\n  },\n  {\n    id: '9',\n    name: 'Education',\n    description: 'Educational institutions and training services'\n  },\n  {\n    id: '10',\n    name: 'Financial Services',\n    description: 'Banks, insurance companies, and financial institutions'\n  },\n  {\n    id: '11',\n    name: 'Real Estate',\n    description: 'Property development, sales, and management'\n  },\n  {\n    id: '12',\n    name: 'Transportation',\n    description: 'Logistics, shipping, and transportation services'\n  },\n  {\n    id: '13',\n    name: 'Entertainment',\n    description: 'Media, entertainment, and recreational services'\n  },\n  {\n    id: '14',\n    name: 'Agriculture',\n    description: 'Farming, livestock, and agricultural products'\n  },\n  {\n    id: '15',\n    name: 'Professional Services',\n    description: 'Consulting, legal, accounting, and other professional services'\n  }\n];\n","/**\n * Business Types API Service\n * \n * This file provides methods for interacting with business types API endpoints.\n */\n\nimport apiClient from '../../../api';\nimport { handleApiError } from '../../../utils/errorHandling';\nimport type { BusinessType } from '../types';\nimport { businessTypes } from '../../../mockData/entities/businessTypes';\n\nexport const businessTypesApi = {\n  /**\n   * Get all business types\n   * @returns Promise resolving to an array of business types\n   */\n  getBusinessTypes: async (): Promise<BusinessType[]> => {\n    try {\n      // For development, return mock data with a delay to simulate API call\n      await new Promise(resolve => setTimeout(resolve, 500));\n      return businessTypes;\n\n      // Uncomment below for real API call\n      // const response = await apiClient.get<BusinessType[]>('/business-types');\n      // if (!response.data) {\n      //   throw new Error('No business types data received');\n      // }\n      // return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n\n  /**\n   * Get a business type by ID\n   * @param id - The business type ID\n   * @returns Promise resolving to a business type\n   */\n  getBusinessTypeById: async (id: string): Promise<BusinessType> => {\n    try {\n      const response = await apiClient.get<BusinessType>(`/business-types/${id}`);\n      if (!response.data) {\n        throw new Error(`No business type data received for ID: ${id}`);\n      }\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  }\n};\n\n// Export individual methods for more flexible importing\nexport const { \n  getBusinessTypes, \n  getBusinessTypeById \n} = businessTypesApi;\n\nexport default businessTypesApi;\n","/**\n * Add User Form Component\n *\n * This component provides a form for adding new users.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport Button from '../../../components/common/Button';\nimport FormField from '../../../components/common/FormField';\nimport ImageUpload from '../../../components/common/ImageUpload';\nimport { validateForm, validationRules } from '../../../utils/validation';\nimport { getBusinessTypes } from '../api/businessTypesApi';\nimport type { UserFormData, BusinessType } from '../types';\n\ninterface AddUserFormProps {\n  onSubmit: (userData: UserFormData & { confirmPassword: string; sendInvite: boolean }) => void;\n  onCancel: () => void;\n  isLoading?: boolean;\n}\n\nconst AddUserForm: React.FC<AddUserFormProps> = ({ onSubmit, onCancel, isLoading = false }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    type: 'customer' as const,\n    phone: '',\n    address: '',\n    businessType: '',\n    password: '',\n    confirmPassword: '',\n    sendInvite: true,\n    image: null as File | null\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [businessTypes, setBusinessTypes] = useState<BusinessType[]>([]);\n  const [loadingBusinessTypes, setLoadingBusinessTypes] = useState(false);\n\n  // Load business types on component mount\n  useEffect(() => {\n    const loadBusinessTypes = async () => {\n      setLoadingBusinessTypes(true);\n      try {\n        const types = await getBusinessTypes();\n        setBusinessTypes(types);\n      } catch (error) {\n        console.error('Failed to load business types:', error);\n        // You might want to show a notification here\n      } finally {\n        setLoadingBusinessTypes(false);\n      }\n    };\n\n    loadBusinessTypes();\n  }, []);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target;\n\n    if (type === 'checkbox') {\n      const checked = (e.target as HTMLInputElement).checked;\n      setFormData(prev => ({ ...prev, [name]: checked }));\n    } else {\n      setFormData(prev => ({ ...prev, [name]: value }));\n    }\n\n    // Clear error when field is edited\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: '' }));\n    }\n  };\n\n  const handleImageChange = (file: File | null) => {\n    setFormData(prev => ({ ...prev, image: file }));\n\n    // Clear error when image is changed\n    if (errors.image) {\n      setErrors(prev => ({ ...prev, image: '' }));\n    }\n  };\n\n  const validateUserForm = () => {\n    const formValidationRules = {\n      name: [validationRules.required('Name is required')],\n      email: [validationRules.required('Email is required'), validationRules.email()],\n      type: [validationRules.required('User type is required')],\n      password: [validationRules.required('Password is required'), validationRules.password()],\n      confirmPassword: [validationRules.required('Confirm password is required'), validationRules.passwordMatch()],\n      address: [validationRules.required('Address is required')],\n      businessType: [validationRules.required('Business type is required')],\n    };\n\n    const newErrors = validateForm(formData, formValidationRules);\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (validateUserForm()) {\n      const submitData = {\n        ...formData,\n        // Include image field, even if null\n        image: formData.image\n      };\n      onSubmit(submitData);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n        <FormField\n          label=\"Full Name\"\n          name=\"name\"\n          value={formData.name}\n          onChange={handleChange}\n          error={errors.name}\n          required\n        />\n        \n        <FormField\n          label=\"Email\"\n          name=\"email\"\n          type=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n          error={errors.email}\n          required\n        />\n        \n        <FormField\n          label=\"User Type\"\n          name=\"type\"\n          type=\"select\"\n          value={formData.type}\n          onChange={handleChange}\n          error={errors.type}\n          required\n          options={[\n            { value: 'customer', label: 'Customer' },\n            { value: 'supplier', label: 'Supplier' }\n          ]}\n        />\n        \n        <FormField\n          label=\"Phone Number\"\n          name=\"phone\"\n          value={formData.phone}\n          onChange={handleChange}\n          error={errors.phone}\n        />\n\n        <FormField\n          label=\"Address\"\n          name=\"address\"\n          type=\"textarea\"\n          value={formData.address}\n          onChange={handleChange}\n          error={errors.address}\n          required\n          placeholder=\"Enter full address\"\n        />\n\n        <FormField\n          label=\"Business Type\"\n          name=\"businessType\"\n          type=\"select\"\n          value={formData.businessType}\n          onChange={handleChange}\n          error={errors.businessType}\n          required\n          loading={loadingBusinessTypes}\n          options={[\n            { value: '', label: 'Select Business Type' },\n            ...businessTypes.map(type => ({\n              value: type.id,\n              label: type.name\n            }))\n          ]}\n        />\n        \n        <FormField\n          label=\"Password\"\n          name=\"password\"\n          type=\"password\"\n          value={formData.password}\n          onChange={handleChange}\n          error={errors.password}\n          required\n        />\n        \n        <FormField\n          label=\"Confirm Password\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          value={formData.confirmPassword}\n          onChange={handleChange}\n          error={errors.confirmPassword}\n          required\n        />\n      </div>\n\n      {/* Image Upload Field */}\n      <ImageUpload\n        label=\"Profile Picture\"\n        name=\"image\"\n        value={formData.image}\n        onChange={handleImageChange}\n        error={errors.image || undefined}\n        maxSize={5 * 1024 * 1024} // 5MB\n        allowedTypes={['image/jpeg', 'image/png', 'image/gif', 'image/webp']}\n      />\n\n      <div className=\"flex items-center\">\n        <FormField\n          label=\"Send invitation email\"\n          name=\"sendInvite\"\n          type=\"checkbox\"\n          value={formData.sendInvite}\n          onChange={handleChange}\n          className=\"flex items-center space-x-2\"\n        />\n      </div>\n      \n      <div className=\"flex justify-end space-x-3\">\n        <Button\n          variant=\"outline\"\n          onClick={onCancel}\n          disabled={isLoading}\n        >\n          Cancel\n        </Button>\n        <Button\n          type=\"submit\"\n          loading={isLoading}\n        >\n          Add User\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default AddUserForm;\n\n\n\n\n\n\n\n","/**\r\n * Edit User Form Component\r\n *\r\n * This component provides a form for editing existing users.\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport Button from '../../../components/common/Button';\r\nimport Card from '../../../components/common/Card';\r\nimport { validateForm, validationRules } from '../../../utils/validation';\r\nimport type { User, UserFormData } from '../types/index';\r\nimport useNotification from '../../../hooks/useNotification';\r\n\r\ninterface EditUserFormProps {\r\n  user: User;\r\n  onSubmit: (userData: UserFormData) => Promise<void>;\r\n  isLoading?: boolean;\r\n}\r\n\r\nconst EditUserForm: React.FC<EditUserFormProps> = ({ \r\n  user, \r\n  onSubmit, \r\n  isLoading = false \r\n}) => {\r\n  const [formData, setFormData] = useState<UserFormData>({\r\n    name: '',\r\n    email: '',\r\n    type: 'customer',\r\n  });\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  const { showNotification } = useNotification();\r\n\r\n  // Initialize form with user data\r\n  useEffect(() => {\r\n    if (user) {\r\n      setFormData({\r\n        name: user.name,\r\n        email: user.email,\r\n        type: user.type,\r\n      });\r\n    }\r\n  }, [user]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    const { name, value, type } = e.target;\r\n\r\n    if (type === 'checkbox') {\r\n      const checked = (e.target as HTMLInputElement).checked;\r\n      setFormData(prev => ({ ...prev, [name]: checked }));\r\n    } else {\r\n      setFormData(prev => ({ ...prev, [name]: value }));\r\n    }\r\n\r\n    // Clear error when field is edited\r\n    if (errors[name]) {\r\n      setErrors(prev => ({ ...prev, [name]: '' }));\r\n    }\r\n  };\r\n\r\n  const validateUserForm = () => {\r\n    const formValidationRules = {\r\n      name: [validationRules.required('Name is required')],\r\n      email: [validationRules.required('Email is required'), validationRules.email()],\r\n      type: [validationRules.required('User type is required')]\r\n    };\r\n    \r\n    const newErrors = validateForm(formData, formValidationRules);\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (validateUserForm()) {\r\n      try {\r\n        await onSubmit(formData);\r\n        showNotification({\r\n          type: 'success',\r\n          title: 'Success',\r\n          message: 'User updated successfully'\r\n        });\r\n      } catch (error) {\r\n        // Error handling is done in the parent component\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\r\n        <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\r\n          <div>\r\n            <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700\">\r\n              Full Name <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"name\"\r\n              name=\"name\"\r\n              value={formData.name}\r\n              onChange={handleChange}\r\n              className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm ${\r\n                errors['name'] ? 'border-red-300' : ''\r\n              }`}\r\n            />\r\n            {errors['name'] && <p className=\"mt-1 text-sm text-red-600\">{errors['name']}</p>}\r\n          </div>\r\n          \r\n          <div>\r\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\r\n              Email <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              value={formData.email}\r\n              onChange={handleChange}\r\n              className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm ${\r\n                errors['email'] ? 'border-red-300' : ''\r\n              }`}\r\n            />\r\n            {errors['email'] && <p className=\"mt-1 text-sm text-red-600\">{errors['email']}</p>}\r\n          </div>\r\n          \r\n          <div>\r\n            <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-700\">\r\n              User Type <span className=\"text-red-500\">*</span>\r\n            </label>\r\n            <select\r\n              id=\"type\"\r\n              name=\"type\"\r\n              value={formData.type}\r\n              onChange={handleChange}\r\n              className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm ${\r\n                errors['type'] ? 'border-red-300' : ''\r\n              }`}\r\n            >\r\n              <option value=\"customer\">Customer</option>\r\n              <option value=\"supplier\">Supplier</option>\r\n            </select>\r\n            {errors['type'] && <p className=\"mt-1 text-sm text-red-600\">{errors['type']}</p>}\r\n          </div>\r\n          \r\n          <div>\r\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\r\n              New Password\r\n            </label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              value={formData.password || ''}\r\n              onChange={handleChange}\r\n              placeholder=\"Leave blank to keep current password\"\r\n              className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm ${\r\n                errors['password'] ? 'border-red-300' : ''\r\n              }`}\r\n            />\r\n            {errors['password'] && <p className=\"mt-1 text-sm text-red-600\">{errors['password']}</p>}\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"flex justify-end space-x-3\">\r\n          <Button\r\n            variant=\"outline\"\r\n            type=\"button\"\r\n            onClick={() => window.history.back()}\r\n            disabled={isLoading}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            type=\"submit\"\r\n            loading={isLoading}\r\n          >\r\n            Save Changes\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default EditUserForm;\r\n","import React from 'react';\r\nimport type { ReactNode } from 'react';\r\n\r\ninterface DetailSectionProps {\r\n  title: string;\r\n  description?: string;\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst DetailSection: React.FC<DetailSectionProps> = ({\r\n  title,\r\n  description,\r\n  children,\r\n  className = ''\r\n}) => {\r\n  return (\r\n    <div className={`bg-white shadow overflow-hidden sm:rounded-lg ${className}`}>\r\n      <div className=\"px-4 py-5 sm:px-6\">\r\n        <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{title}</h3>\r\n        {description && (\r\n          <p className=\"mt-1 max-w-2xl text-sm text-gray-500\">{description}</p>\r\n        )}\r\n      </div>\r\n      <div className=\"border-t border-gray-200\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailSection;","import React from 'react';\r\nimport type { ReactNode } from 'react';\r\n\r\ninterface DetailListProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst DetailList: React.FC<DetailListProps> = ({\r\n  children,\r\n  className = ''\r\n}) => {\r\n  return (\r\n    <dl className={`sm:divide-y sm:divide-gray-200 ${className}`}>\r\n      {children}\r\n    </dl>\r\n  );\r\n};\r\n\r\nexport default DetailList;","import React from 'react';\r\nimport type { ReactNode } from 'react';\r\n\r\ninterface DetailItemProps {\r\n  label: string;\r\n  value: ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst DetailItem: React.FC<DetailItemProps> = ({\r\n  label,\r\n  value,\r\n  className = ''\r\n}) => {\r\n  return (\r\n    <div className={`py-4 sm:py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6 ${className}`}>\r\n      <dt className=\"text-sm font-medium text-gray-500\">{label}</dt>\r\n      <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">{value}</dd>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailItem;","import React from 'react';\r\nimport DetailSection from './DetailSection';\r\nimport type { Order } from '../../features/orders/types';\r\nimport { formatCurrency, formatDate } from '../../utils/formatters';\r\nimport StatusBadge from './StatusBadge';\r\nimport Button from './Button';\r\nimport { EyeIcon } from '@heroicons/react/24/outline';\r\n\r\ninterface OrdersSectionProps {\r\n  orders: Order[];\r\n  title?: string;\r\n  description?: string;\r\n  onViewOrder?: (order: Order) => void;\r\n  emptyMessage?: string;\r\n  className?: string;\r\n}\r\n\r\nconst OrdersSection: React.FC<OrdersSectionProps> = ({\r\n  orders,\r\n  title = 'Orders',\r\n  description = 'Recent orders',\r\n  onViewOrder,\r\n  emptyMessage = 'No orders found',\r\n  className = ''\r\n}) => {\r\n  return (\r\n    <DetailSection\r\n      title={title}\r\n      description={description}\r\n      className={className}\r\n    >\r\n      {orders.length === 0 ? (\r\n        <div className=\"px-4 py-5 text-center text-sm text-gray-500\">\r\n          {emptyMessage}\r\n        </div>\r\n      ) : (\r\n        <div className=\"overflow-x-auto\">\r\n          <table className=\"min-w-full divide-y divide-gray-200\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Order ID\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Date\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Amount\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Status\r\n                </th>\r\n                <th scope=\"col\" className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Actions\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {orders.map((order) => (\r\n                <tr key={order.id} className=\"hover:bg-gray-50\">\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-primary\">\r\n                    {order.id}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                    {formatDate(order.orderDate)}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                    {formatCurrency(order.totalAmount)}\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                    <StatusBadge status={order.status} type=\"order\" />\r\n                  </td>\r\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\r\n                    {onViewOrder && (\r\n                      <Button\r\n                        variant=\"text\"\r\n                        size=\"sm\"\r\n                        onClick={() => onViewOrder(order)}\r\n                        icon={<EyeIcon className=\"w-4 h-4\" />}\r\n                      >\r\n                        View\r\n                      </Button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </DetailSection>\r\n  );\r\n};\r\n\r\nexport default OrdersSection;","/**\n * User Details Component\n * \n * This component displays detailed information about a user.\n */\n\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport DetailSection from '../../../components/common/DetailSection';\nimport DetailList from '../../../components/common/DetailList';\nimport DetailItem from '../../../components/common/DetailItem';\nimport OrdersSection from '../../../components/common/OrdersSection';\nimport StatusBadge from '../../../components/common/StatusBadge';\nimport type{ User } from '../types';\nimport type { Order } from '../../orders/types';\nimport { ROUTES } from '../../../constants/routes';\n\ninterface UserDetailsProps {\n  user: User;\n  userOrders: Order[];\n}\n\nconst UserDetails: React.FC<UserDetailsProps> = ({ user, userOrders = [] }) => {\n  const navigate = useNavigate();\n  \n  const handleViewOrder = (order: Order) => {\n    navigate(ROUTES.getOrderDetailsRoute(order.id));\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      <DetailSection\n        title=\"User Information\"\n        description=\"Personal details and application\"\n      >\n        <DetailList>\n          <DetailItem label=\"Full name\" value={user.name} />\n          <DetailItem label=\"Email address\" value={user.email} />\n          <DetailItem label=\"User type\" value={user.type} />\n          <DetailItem label=\"Status\" value={<StatusBadge status={user.status} type=\"user\" />} />\n          <DetailItem label=\"Last login\" value={user.lastLogin} />\n        </DetailList>\n      </DetailSection>\n      \n      <OrdersSection\n        orders={userOrders}\n        title=\"User Orders\"\n        description=\"Orders placed by this user\"\n        onViewOrder={handleViewOrder}\n        emptyMessage=\"This user has not placed any orders yet\"\n      />\n    </div>\n  );\n};\n\nexport default UserDetails;\n\n\n\n","/**\n * User List Component\n *\n * This component displays a list of users in a data table.\n */\n\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport BaseEntityList from '../../../components/common/EntityList/BaseEntityList';\nimport type { Column } from '../../../components/common/DataTable';\nimport type { User } from '../types';\nimport {\n  EnvelopeIcon,\n  PencilIcon,\n  TrashIcon,\n  EyeIcon\n} from '@heroicons/react/24/outline';\nimport { ROUTES } from '../../../constants/routes';\n\ninterface UserListProps {\n  users: User[];\n  onViewUser: (user: User) => void;\n  onEditUser: (user: User) => void;\n  onDeleteUser: (user: User) => void;\n  onUserClick: (user: User) => void;\n  title?: string;\n  loading?: boolean;\n}\n\nconst UserList: React.FC<UserListProps> = ({\n  users,\n  onViewUser,\n  onEditUser: _onEditUser,\n  onDeleteUser,\n  onUserClick,\n  title = 'Users',\n  loading = false\n}) => {\n  const navigate = useNavigate();\n  \n  // Define user-specific columns\n  const columns: Column<User>[] = [\n    {\n      key: 'name',\n      label: 'Name',\n      sortable: true,\n      render: (_value, user) => (\n        <div className=\"flex items-center\">\n          {user.avatar ? (\n            <img\n              src={user.avatar}\n              alt={user.name}\n              className=\"w-8 h-8 rounded-full mr-3 object-cover\"\n            />\n          ) : (\n            <div className=\"w-8 h-8 rounded-full bg-primary text-white flex items-center justify-center mr-3\">\n              {user.name.charAt(0)}\n            </div>\n          )}\n          <div>\n            <div className=\"font-medium text-gray-900\">{user.name}</div>\n            <div className=\"text-xs text-gray-500\">ID: {user.id}</div>\n          </div>\n        </div>\n      )\n    },\n    {\n      key: 'email',\n      label: 'Email',\n      sortable: true,\n      render: (value) => (\n        <div className=\"flex items-center\">\n          <EnvelopeIcon className=\"w-4 h-4 text-gray-400 mr-2\" />\n          <span>{value}</span>\n        </div>\n      )\n    },\n    { key: 'type', label: 'Type', sortable: true },\n    { key: 'status', label: 'Status', sortable: true },\n    { key: 'lastLogin', label: 'Last Login', sortable: true },\n    {\n      key: 'actions',\n      label: 'Actions',\n      render: (_, user) => (\n        <div className=\"flex items-center space-x-2\">\n          <button\n            className=\"p-1 text-gray-500 hover:text-primary rounded-full hover:bg-gray-100\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onViewUser(user);\n            }}\n          >\n            <EyeIcon className=\"w-5 h-5\" />\n          </button>\n          <button\n            className=\"p-1 text-gray-500 hover:text-blue-600 rounded-full hover:bg-gray-100\"\n            onClick={(e) => {\n              e.stopPropagation();\n              navigate(ROUTES.getUserEditRoute(user.id));\n            }}\n          >\n            <PencilIcon className=\"w-5 h-5\" />\n          </button>\n          <button\n            className=\"p-1 text-gray-500 hover:text-red-600 rounded-full hover:bg-gray-100\"\n            onClick={(e) => {\n              e.stopPropagation();\n              onDeleteUser(user);\n            }}\n          >\n            <TrashIcon className=\"w-5 h-5\" />\n          </button>\n        </div>\n      )\n    }\n  ];\n\n  return (\n    <BaseEntityList<User>\n      data={users}\n      columns={columns}\n      onRowClick={onUserClick}\n      title={title}\n      pagination={true}\n      loading={loading}\n      emptyMessage=\"No users found\"\n    />\n  );\n};\n\nexport default UserList;\n\n\n\n","import React from 'react';\r\nimport MetricCard from '../../features/analytics/components/MetricCard';\r\n\r\nexport interface Metric {\r\n  title: string;\r\n  value: string | number;\r\n  change?: number;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\ninterface MetricsSectionProps {\r\n  metrics: Metric[];\r\n  className?: string;\r\n}\r\n\r\nconst MetricsSection: React.FC<MetricsSectionProps> = ({\r\n  metrics,\r\n  className = ''\r\n}) => {\r\n  return (\r\n    <div className={`grid grid-cols-1 md:grid-cols-3 gap-6 ${className}`}>\r\n      {metrics.map((metric, index) => (\r\n        <MetricCard\r\n          key={index}\r\n          title={metric.title}\r\n          data={{ total: typeof metric.value === 'string' ? parseFloat(metric.value) || 0 : metric.value, growth: metric.change || 0 }}\r\n          icon={metric.icon}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MetricsSection;\r\n","import React from 'react';\r\nimport type { ReactNode } from 'react';\r\nimport Card from '../common/Card';\r\n\r\ninterface ChartSectionProps {\r\n  title: string;\r\n  description?: string;\r\n  children: ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst ChartSection: React.FC<ChartSectionProps> = ({\r\n  title,\r\n  description,\r\n  children,\r\n  className = ''\r\n}) => {\r\n  return (\r\n    <Card className={className}>\r\n      <div className=\"px-4 py-5 sm:px-6\">\r\n        <h3 className=\"text-lg leading-6 font-medium text-gray-900\">{title}</h3>\r\n        {description && (\r\n          <p className=\"mt-1 max-w-2xl text-sm text-gray-500\">{description}</p>\r\n        )}\r\n      </div>\r\n      <div className=\"px-4 py-5 sm:p-6\">\r\n        {children}\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ChartSection;","import React from 'react';\r\nimport { CurrencyDollarIcon, ShoppingCartIcon, ClockIcon } from '@heroicons/react/24/outline';\r\nimport MetricsSection from '../../../components/analytics/MetricsSection';\r\nimport type { Metric } from '../../../components/analytics/MetricsSection';\r\nimport ChartSection from '../../../components/analytics/ChartSection';\r\nimport BarChart from '../../analytics/components/BarChart';\r\nimport { formatCurrency } from '../../../utils/formatters';\r\n\r\ninterface UserAnalyticsProps {\r\n  userId: string;\r\n  userData: {\r\n    totalOrders: number;\r\n    totalSpent: number;\r\n    averageOrderValue: number;\r\n    orderFrequency: number;\r\n    orderHistory: {\r\n      date: string;\r\n      amount: number;\r\n    }[];\r\n  };\r\n}\r\n\r\nconst UserAnalytics: React.FC<UserAnalyticsProps> = ({\r\n  userId: _userId,\r\n  userData\r\n}) => {\r\n  // Prepare metrics\r\n  const metrics: Metric[] = [\r\n    {\r\n      title: 'Total Orders',\r\n      value: userData.totalOrders,\r\n      icon: <ShoppingCartIcon className=\"w-6 h-6 text-blue-500\" />\r\n    },\r\n    {\r\n      title: 'Total Spent',\r\n      value: formatCurrency(userData.totalSpent),\r\n      icon: <CurrencyDollarIcon className=\"w-6 h-6 text-green-500\" />\r\n    },\r\n    {\r\n      title: 'Average Order',\r\n      value: formatCurrency(userData.averageOrderValue),\r\n      icon: <ClockIcon className=\"w-6 h-6 text-purple-500\" />\r\n    }\r\n  ];\r\n  \r\n  // Prepare chart data\r\n  const chartData = userData.orderHistory.map(item => ({\r\n    label: item.date,\r\n    value: item.amount\r\n  }));\r\n  \r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <MetricsSection metrics={metrics} />\r\n      \r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <ChartSection title=\"Order History\" description=\"User's order history over time\">\r\n          <BarChart\r\n            title=\"Order History\" // Optional\r\n            data={chartData.map(item => item.value)}\r\n            labels={chartData.map(item => item.label)}\r\n            color=\"bg-primary\" // Primary color (optional)\r\n          />\r\n        </ChartSection>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserAnalytics;","/**\n * Users API Service\n * \n * This file provides methods for interacting with the users API endpoints.\n */\n\nimport apiClient from '../../../api';\nimport { handleApiError } from '../../../utils/errorHandling';\nimport type { User, UserFormData } from '../types';\n\n/**\n * Users API service with methods for managing user data\n */\nexport const usersApi = {\n  /**\n   * Get all users with optional filtering\n   * @param params - Optional query parameters for filtering users\n   * @returns Promise resolving to an array of users\n   */\n  getUsers: async (params?: Record<string, any>): Promise<User[]> => {\n    try {\n      const response = await apiClient.get<User[]>('/users', { params });\n      if (!response.data) {\n        throw new Error('No users data received');\n      }\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n\n  /**\n   * Get a user by their ID\n   * @param id - The user's unique identifier\n   * @returns Promise resolving to a single user\n   */\n  getUserById: async (id: string): Promise<User> => {\n    try {\n      const response = await apiClient.get<User>(`/users/${id}`);\n      if (!response.data) {\n        throw new Error(`No user data received for ID: ${id}`);\n      }\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n\n  /**\n   * Create a new user\n   * @param userData - The user data to create\n   * @returns Promise resolving to the created user\n   */\n  createUser: async (userData: UserFormData): Promise<User> => {\n    try {\n      const response = await apiClient.post<User>('/users', userData);\n      if (!response.data) {\n        throw new Error('Failed to create user');\n      }\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n\n  /**\n   * Update an existing user\n   * @param id - The user's unique identifier\n   * @param userData - The user data to update\n   * @returns Promise resolving to the updated user\n   */\n  updateUser: async (id: string, userData: UserFormData): Promise<User> => {\n    try {\n      const response = await apiClient.put<User>(`/users/${id}`, userData);\n      if (!response.data) {\n        throw new Error(`Failed to update user ${id}`);\n      }\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n\n  /**\n   * Delete a user\n   * @param id - The user's unique identifier\n   * @returns Promise resolving to a success indicator\n   */\n  deleteUser: async (id: string): Promise<void> => {\n    try {\n      await apiClient.delete(`/users/${id}`);\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n  \n  /**\n   * Toggle a user's status between active and banned\n   * @param id - The user's unique identifier\n   * @param status - The new status to set\n   * @returns Promise resolving to the updated user\n   */\n  toggleUserStatus: async (id: string, status: 'active' | 'banned'): Promise<User> => {\n    try {\n      const response = await apiClient.put<User>(`/users/${id}/status`, { status });\n      if (!response.data) {\n        throw new Error(`Failed to toggle status for user ${id}`);\n      }\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n\n  /**\n   * Search for users by name or email\n   * @param query - The search query string\n   * @returns Promise resolving to an array of matching users\n   */\n  searchUsers: async (query: string): Promise<User[]> => {\n    try {\n      const response = await apiClient.get<User[]>('/users', { \n        params: { search: query } \n      });\n      if (!response.data) {\n        throw new Error('No users data received');\n      }\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n\n  /**\n   * Get users filtered by type\n   * @param type - The user type to filter by\n   * @returns Promise resolving to an array of users of the specified type\n   */\n  getUsersByType: async (type: 'customer' | 'supplier' | 'admin'): Promise<User[]> => {\n    try {\n      const response = await apiClient.get<User[]>('/users', {\n        params: { type }\n      });\n      if (!response.data) {\n        throw new Error('No users data received');\n      }\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  },\n\n  /**\n   * Upload user image\n   * @param file - The image file to upload\n   * @returns Promise resolving to the uploaded image URL\n   */\n  uploadUserImage: async (file: File): Promise<{ imageUrl: string }> => {\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n\n      const response = await apiClient.post<{ imageUrl: string }>('/users/upload-image', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (!response.data) {\n        throw new Error('Failed to upload user image');\n      }\n      return response.data;\n    } catch (error) {\n      throw handleApiError(error);\n    }\n  }\n};\n\n// Export individual methods for more flexible importing\nexport const {\n  getUsers,\n  getUserById,\n  createUser,\n  updateUser,\n  deleteUser,\n  toggleUserStatus,\n  searchUsers,\n  getUsersByType,\n  uploadUserImage\n} = usersApi;\n\nexport default usersApi;\n\n\n","// src/features/users/hooks/useUsers.ts\n/**\n * Users Hook\n * \n * This hook provides methods and state for working with users.\n */\n\nimport { useCallback } from 'react';\nimport { useEntityData } from '../../../hooks/useEntityData';\nimport usersApi from '../api/usersApi';\nimport type { User, UserFormData } from '../types';\nimport useNotification from '../../../hooks/useNotification';\n\nexport const useUsers = (options = { initialFetch: true }) => {\n  // Create an adapter that maps usersApi methods to what useEntityData expects\n  const apiAdapter = {\n    getAll: usersApi.getUsers,\n    getById: usersApi.getUserById,\n    create: usersApi.createUser,\n    update: usersApi.updateUser,\n    delete: usersApi.deleteUser\n  };\n  \n  const baseHook = useEntityData<User>(apiAdapter, {\n    entityName: 'users',\n    initialFetch: options.initialFetch\n  });\n  \n  const { showNotification } = useNotification();\n  \n  // User-specific methods\n  const toggleUserStatus = useCallback(async (id: string, status: 'active' | 'banned') => {\n    try {\n      const updatedUser = await usersApi.toggleUserStatus(id, status);\n      // Update the local state if the user exists in the current list\n      baseHook.entities.forEach((user, index) => {\n        if ((user as User).id === id) {\n          const updatedEntities = [...baseHook.entities];\n          updatedEntities[index] = updatedUser;\n          // Use the setEntities method from baseHook if exposed, or implement a custom solution\n        }\n      });\n      \n      showNotification({\n        type: 'success',\n        title: 'Success',\n        message: `User ${status === 'active' ? 'activated' : 'banned'} successfully`\n      });\n      \n      return updatedUser;\n    } catch (error) {\n      showNotification({\n        type: 'error',\n        title: 'Error',\n        message: `Failed to ${status === 'active' ? 'activate' : 'ban'} user`\n      });\n      throw error;\n    }\n  }, [baseHook.entities, showNotification]);\n  \n  // Add updateUser method\n  const updateUser = useCallback(async (id: string, userData: UserFormData) => {\n    try {\n      const updatedUser = await usersApi.updateUser(id, userData);\n      \n      // Update the local state if the user exists in the current list\n      const updatedEntities = [...baseHook.entities];\n      const userIndex = updatedEntities.findIndex((user) => (user as User).id === id);\n      \n      if (userIndex !== -1) {\n        updatedEntities[userIndex] = updatedUser;\n        // If baseHook exposes a setEntities method, use it here\n      }\n      \n      showNotification({\n        type: 'success',\n        title: 'Success',\n        message: 'User updated successfully'\n      });\n      \n      return updatedUser;\n    } catch (error) {\n      showNotification({\n        type: 'error',\n        title: 'Error',\n        message: 'Failed to update user'\n      });\n      throw error;\n    }\n  }, [baseHook.entities, showNotification]);\n  \n  return {\n    ...baseHook,\n    users: baseHook.entities as User[], // Rename for clarity\n    fetchUsers: baseHook.fetchEntities, // Rename for clarity\n    getUserById: baseHook.getEntityById, // Rename for clarity\n    toggleUserStatus,\n    updateUser // Add the new method to the return object\n  };\n};\n\nexport default useUsers;","/**\n * User Mappers\n * \n * Utility functions to map between different user data formats\n */\n\nimport type{ User } from '../types/index';\nimport { users as mockUsers } from '../../../mockData/entities/users';\n\n/**\n * Maps a mock user to the application user format\n */\nexport const mapMockUserToUser = (mockUser: any): User => {\n  // Filter out admin users as they're not part of the regular user interface\n  if (mockUser.type === 'admin') {\n    return null as unknown as User;\n  }\n  \n  return {\n    id: mockUser.id,\n    name: mockUser.name,\n    email: mockUser.email,\n    type: mockUser.type as 'customer' | 'supplier',\n    status: mockUser.status === 'pending' ? 'active' : mockUser.status, // Map 'pending' to 'active' for compatibility\n    lastLogin: mockUser.lastLogin ? new Date(mockUser.lastLogin).toISOString().split('T')[0]! : new Date().toISOString().split('T')[0]!,\n    avatar: mockUser.avatar || ''\n  };\n};\n\n/**\n * Get all users from mock data\n */\nexport const getMockUsers = (): User[] => {\n  return mockUsers\n    .map(mapMockUserToUser)\n    .filter(user => user !== null); // Filter out null values (admin users)\n};\n\n/**\n * Get a user by ID from mock data\n */\nexport const getMockUserById = (id: string): User | undefined => {\n  const mockUser = mockUsers.find(u => u.id === id);\n  if (!mockUser || mockUser.type === 'admin') return undefined;\n  return mapMockUserToUser(mockUser);\n};\n\nexport default {\n  mapMockUserToUser,\n  getMockUsers,\n  getMockUserById\n};\n","import { useState, useCallback, useEffect, useRef } from 'react';\r\nimport useNotification from './useNotification';\r\n\r\nexport interface EntityApi<T, IdType = string> {\r\n  getAll: (params?: any) => Promise<T[]>;\r\n  getById: (id: IdType) => Promise<T>;\r\n  create: (data: any) => Promise<T>;\r\n  update: (id: IdType, data: any) => Promise<T>;\r\n  delete: (id: IdType) => Promise<void>;\r\n}\r\n\r\nexport interface UseEntityDataOptions {\r\n  entityName: string;\r\n  initialFetch?: boolean;\r\n}\r\n\r\nexport const useEntityData = <T, IdType = string>(\r\n  apiService: EntityApi<T, IdType>,\r\n  options: UseEntityDataOptions\r\n) => {\r\n  const [entities, setEntities] = useState<T[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n  const { showNotification } = useNotification();\r\n\r\n  // Use refs to store current values and avoid stale closures\r\n  const apiServiceRef = useRef(apiService);\r\n  const showNotificationRef = useRef(showNotification);\r\n  const entityNameRef = useRef(options.entityName);\r\n  const hasInitialFetched = useRef(false);\r\n\r\n  // Update refs when values change\r\n  useEffect(() => {\r\n    apiServiceRef.current = apiService;\r\n    showNotificationRef.current = showNotification;\r\n    entityNameRef.current = options.entityName;\r\n  });\r\n\r\n  const fetchEntities = useCallback(async (params?: any) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const data = await apiServiceRef.current.getAll(params);\r\n      setEntities(data);\r\n      return data;\r\n    } catch (err) {\r\n      const error = err as Error;\r\n      setError(error);\r\n      showNotificationRef.current({\r\n        type: 'error',\r\n        title: 'Error',\r\n        message: `Failed to fetch ${entityNameRef.current}`\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []); // No dependencies needed due to refs\r\n\r\n  const getEntityById = useCallback(async (id: IdType) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const entity = await apiServiceRef.current.getById(id);\r\n      return entity;\r\n    } catch (err) {\r\n      const error = err as Error;\r\n      setError(error);\r\n      showNotificationRef.current({\r\n        type: 'error',\r\n        title: 'Error',\r\n        message: `Failed to fetch ${entityNameRef.current}`\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []); // No dependencies needed due to refs\r\n\r\n  // Other common methods (create, update, delete)\r\n\r\n  // Initial fetch effect - runs only once\r\n  useEffect(() => {\r\n    if (options.initialFetch !== false && !hasInitialFetched.current) {\r\n      console.log(`[useEntityData] Starting initial fetch for ${options.entityName}`);\r\n      hasInitialFetched.current = true;\r\n\r\n      const initialFetch = async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n          console.log(`[useEntityData] Calling API for ${options.entityName}`);\r\n          const data = await apiService.getAll();\r\n          console.log(`[useEntityData] Received data for ${options.entityName}:`, data);\r\n          setEntities(data);\r\n        } catch (err) {\r\n          const error = err as Error;\r\n          console.error(`[useEntityData] Error fetching ${options.entityName}:`, error);\r\n          setError(error);\r\n          showNotification({\r\n            type: 'error',\r\n            title: 'Error',\r\n            message: `Failed to fetch ${options.entityName}`\r\n          });\r\n        } finally {\r\n          console.log(`[useEntityData] Finished fetch for ${options.entityName}`);\r\n          setIsLoading(false);\r\n        }\r\n      };\r\n\r\n      initialFetch();\r\n    }\r\n  }, []); // Empty dependency array - runs only once on mount\r\n\r\n  return {\r\n    entities,\r\n    isLoading,\r\n    error,\r\n    fetchEntities,\r\n    getEntityById,\r\n    // Other methods\r\n  };\r\n};","import * as React from \"react\";\nfunction CurrencyDollarIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 6v12m-3-2.818.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(CurrencyDollarIcon);\nexport default ForwardRef;","/**\n * Metric Card Component\n *\n * This component displays a metric card with an icon, title, value, and growth indicator.\n */\n\nimport React from 'react';\nimport Card from '../../../components/common/Card';\nimport type { MetricData } from '../types/index';\n\n// Helper function to get appropriate background class for icon\nconst getIconBackgroundClass = (icon: React.ReactNode): string => {\n  if (!React.isValidElement(icon)) return 'bg-primary bg-opacity-10';\n\n  // Get the className from the icon props\n  const className = icon.props.className || '';\n\n  // Extract color from text-{color} class with more specific matching\n  if (className.includes('text-primary')) return 'bg-primary bg-opacity-10';\n  if (className.includes('text-blue')) return 'bg-blue-500 bg-opacity-10';\n  if (className.includes('text-green')) return 'bg-green-500 bg-opacity-10';\n  if (className.includes('text-yellow')) return 'bg-yellow-500 bg-opacity-10';\n  if (className.includes('text-red')) return 'bg-red-500 bg-opacity-10';\n  if (className.includes('text-purple')) return 'bg-purple-500 bg-opacity-10';\n  if (className.includes('text-indigo')) return 'bg-indigo-500 bg-opacity-10';\n  if (className.includes('text-pink')) return 'bg-pink-500 bg-opacity-10';\n  if (className.includes('text-gray')) return 'bg-gray-500 bg-opacity-10';\n\n  // Default fallback - use primary color\n  return 'bg-primary bg-opacity-10';\n};\n\ninterface MetricCardProps {\n  title: string;\n  data: MetricData;\n  icon: React.ReactNode;\n  formatValue?: (value: number) => string;\n}\n\nconst MetricCard: React.FC<MetricCardProps> = ({\n  title,\n  data,\n  icon,\n  formatValue = (value) => value.toString()\n}) => {\n  return (\n    <Card>\n      <div className=\"flex items-center\">\n        <div className={`p-3 rounded-full ${getIconBackgroundClass(icon)}`}>\n          {/* Ensure consistent icon styling while preserving color */}\n          {React.isValidElement(icon) ? (\n            (() => {\n              const iconElement = icon as React.ReactElement;\n              const existingClassName = iconElement.props.className || '';\n              const colorMatch = existingClassName.match(/text-[a-z0-9-]+/);\n              const colorClass = colorMatch ? colorMatch[0] : 'text-primary';\n\n              return React.cloneElement(iconElement, {\n                className: `w-6 h-6 ${colorClass}`\n              });\n            })()\n          ) : (\n            icon\n          )}\n        </div>\n        <div className=\"ml-4\">\n          <h3 className=\"text-lg font-semibold text-gray-700\">{title}</h3>\n          <div className=\"flex items-center\">\n            <p className=\"text-2xl font-bold text-gray-900\">{formatValue(data.total)}</p>\n            <span className={`ml-2 text-sm font-medium ${data.growth >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {data.growth >= 0 ? '+' : ''}{data.growth.toFixed(1)}%\n            </span>\n          </div>\n          <p className=\"text-sm text-gray-500\">vs previous period</p>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default MetricCard;\n","/**\n * Formatters\n * \n * This file contains utility functions for formatting data.\n */\n\n/**\n * Format a date string to a human-readable format\n */\nexport const formatDate = (dateString: string, options: Intl.DateTimeFormatOptions = {}): string => {\n  if (!dateString) return '-';\n  \n  try {\n    const date = new Date(dateString);\n    \n    // Default options\n    const defaultOptions: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      ...options\n    };\n    \n    return new Intl.DateTimeFormat('en-US', defaultOptions).format(date);\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateString;\n  }\n};\n\n/**\n * Format a date string to include time\n */\nexport const formatDateTime = (dateString: string): string => {\n  return formatDate(dateString, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\n/**\n * Format a number as currency\n */\nexport const formatCurrency = (\n  amount: number,\n  currency: string = 'USD',\n  locale: string = 'en-US'\n): string => {\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(amount);\n  } catch (error) {\n    console.error('Error formatting currency:', error);\n    return `${currency} ${amount.toFixed(2)}`;\n  }\n};\n\n/**\n * Format a number with commas\n */\nexport const formatNumber = (\n  number: number,\n  options: Intl.NumberFormatOptions = {}\n): string => {\n  try {\n    return new Intl.NumberFormat('en-US', options).format(number);\n  } catch (error) {\n    console.error('Error formatting number:', error);\n    return number.toString();\n  }\n};\n\n/**\n * Format a phone number\n */\nexport const formatPhoneNumber = (phoneNumber: string): string => {\n  if (!phoneNumber) return '-';\n  \n  // Remove all non-numeric characters\n  const cleaned = phoneNumber.replace(/\\D/g, '');\n  \n  // Format based on length\n  if (cleaned.length === 10) {\n    return `(${cleaned.slice(0, 3)}) ${cleaned.slice(3, 6)}-${cleaned.slice(6)}`;\n  } else if (cleaned.length === 11 && cleaned.startsWith('1')) {\n    return `+1 (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7)}`;\n  }\n  \n  // If it doesn't match expected formats, return as is\n  return phoneNumber;\n};\n\n/**\n * Truncate text with ellipsis\n */\nexport const truncateText = (text: string, maxLength: number): string => {\n  if (!text) return '';\n  if (text.length <= maxLength) return text;\n  \n  return `${text.slice(0, maxLength)}...`;\n};\n\n/**\n * Format file size\n */\nexport const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n};\n\n/**\n * Format a duration in milliseconds to a human-readable format\n */\nexport const formatDuration = (milliseconds: number): string => {\n  const seconds = Math.floor(milliseconds / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n  \n  if (days > 0) {\n    return `${days} day${days > 1 ? 's' : ''}`;\n  } else if (hours > 0) {\n    return `${hours} hour${hours > 1 ? 's' : ''}`;\n  } else if (minutes > 0) {\n    return `${minutes} minute${minutes > 1 ? 's' : ''}`;\n  } else {\n    return `${seconds} second${seconds !== 1 ? 's' : ''}`;\n  }\n};\n","import React from 'react';\r\nimport {\r\n  CheckCircleIcon,\r\n  XCircleIcon,\r\n  ClockIcon,\r\n  TruckIcon,\r\n  ExclamationCircleIcon\r\n} from '@heroicons/react/24/outline';\r\n\r\nexport type StatusType = 'user' | 'supplier' | 'order' | 'verification' | 'category';\r\n\r\ninterface StatusBadgeProps {\r\n  status: string;\r\n  type?: StatusType;\r\n  className?: string;\r\n}\r\n\r\nconst StatusBadge: React.FC<StatusBadgeProps> = ({\r\n  status,\r\n  type: _type = 'user',\r\n  className = ''\r\n}) => {\r\n  const statusKey = status.toLowerCase();\r\n  let colorClass = '';\r\n  let icon = null;\r\n  \r\n  // Common statuses across entity types\r\n  if (statusKey === 'active' || statusKey === 'verified' || statusKey === 'completed') {\r\n    colorClass = 'bg-green-100 text-green-800';\r\n    icon = <CheckCircleIcon className=\"w-4 h-4 mr-1\" />;\r\n  } else if (statusKey === 'pending' || statusKey === 'processing') {\r\n    colorClass = 'bg-blue-100 text-blue-800';\r\n    icon = <ClockIcon className=\"w-4 h-4 mr-1\" />;\r\n  } else if (statusKey === 'banned' || statusKey === 'rejected') {\r\n    colorClass = 'bg-red-100 text-red-800';\r\n    icon = <XCircleIcon className=\"w-4 h-4 mr-1\" />;\r\n  } else if (statusKey === 'shipped') {\r\n    colorClass = 'bg-purple-100 text-purple-800';\r\n    icon = <TruckIcon className=\"w-4 h-4 mr-1\" />;\r\n  } else if (statusKey === 'warning') {\r\n    colorClass = 'bg-yellow-100 text-yellow-800';\r\n    icon = <ExclamationCircleIcon className=\"w-4 h-4 mr-1\" />;\r\n  } else {\r\n    colorClass = 'bg-gray-100 text-gray-800';\r\n  }\r\n  \r\n  // Format the status text (capitalize first letter)\r\n  const formattedStatus = status.charAt(0).toUpperCase() + status.slice(1);\r\n  \r\n  return (\r\n    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colorClass} ${className}`}>\r\n      {icon}\r\n      {formattedStatus}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default StatusBadge;\r\n","/**\r\n * BaseEntityList Component\r\n *\r\n * A reusable list component for displaying entities in a data table.\r\n * This component is generic and can be used for any entity type.\r\n */\r\n\r\nimport DataTable from '../DataTable';\r\nimport type { Column } from '../DataTable';\r\n\r\nexport interface BaseEntityListProps<T> {\r\n  data: T[];\r\n  columns: Column<T>[];\r\n  onRowClick?: (entity: T) => void;\r\n  title?: string;\r\n  pagination?: boolean;\r\n  loading?: boolean;\r\n  emptyMessage?: string;\r\n  className?: string;\r\n}\r\n\r\nexport const BaseEntityList = <T extends Record<string, any>>({\r\n  data,\r\n  columns,\r\n  onRowClick,\r\n  title,\r\n  pagination = true,\r\n  loading = false,\r\n  emptyMessage = 'No data available',\r\n  className = ''\r\n}: BaseEntityListProps<T>) => {\r\n  return (\r\n    <DataTable<T>\r\n      columns={columns}\r\n      data={data}\r\n      onRowClick={onRowClick}\r\n      title={title}\r\n      pagination={pagination}\r\n      loading={loading}\r\n      emptyMessage={emptyMessage}\r\n      className={className}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BaseEntityList;","import * as React from \"react\";\nfunction TruckIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M8.25 18.75a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 0 1-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h1.125c.621 0 1.129-.504 1.09-1.124a17.902 17.902 0 0 0-3.213-9.193 2.056 2.056 0 0 0-1.58-.86H14.25M16.5 18.75h-2.25m0-11.177v-.958c0-.568-.422-1.048-.987-1.106a48.554 48.554 0 0 0-10.026 0 1.106 1.106 0 0 0-.987 1.106v7.635m12-6.677v6.677m0 4.5v-4.5m0 0h-12\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(TruckIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction ClockIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ClockIcon);\nexport default ForwardRef;","/**\n * Bar Chart Component\n * \n * This component displays a simple bar chart.\n */\n\nimport React from 'react';\nimport Card from '../../../components/common/Card';\n\ninterface BarChartProps {\n  title: string;\n  labels: string[];\n  data: number[];\n  color?: string;\n}\n\nconst BarChart: React.FC<BarChartProps> = ({\n  title,\n  labels,\n  data,\n  color = 'bg-primary'\n}) => {\n  return (\n    <Card title={title}>\n      <div className=\"h-80 flex items-center justify-center\">\n        <div className=\"w-full h-full\">\n          <div className=\"w-full h-full flex flex-col\">\n            <div className=\"flex justify-between mb-4\">\n              {labels.map((label, index) => (\n                <div key={index} className=\"text-xs text-gray-500\">{label}</div>\n              ))}\n            </div>\n            <div className=\"flex-1 flex items-end\">\n              {data.map((value, index) => {\n                const height = `${(value / Math.max(...data)) * 100}%`;\n                return (\n                  <div key={index} className=\"flex-1 mx-1\">\n                    <div\n                      className={`${color} rounded-t-md w-full transition-all duration-500`}\n                      style={{ height }}\n                    ></div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport default BarChart;\n","import * as React from \"react\";\nfunction EnvelopeIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M21.75 6.75v10.5a2.25 2.25 0 0 1-2.25 2.25h-15a2.25 2.25 0 0 1-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0 0 19.5 4.5h-15a2.25 2.25 0 0 0-2.25 2.25m19.5 0v.243a2.25 2.25 0 0 1-1.07 1.916l-7.5 4.615a2.25 2.25 0 0 1-2.36 0L3.32 8.91a2.25 2.25 0 0 1-1.07-1.916V6.75\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(EnvelopeIcon);\nexport default ForwardRef;"],"names":["_ref","label","name","type","value","onChange","error","required","placeholder","options","className","disabled","loading","inputClasses","_jsxs","children","htmlFor","_jsx","renderField","id","map","option","checked","PhotoIcon","svgRef","title","titleId","props","React","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","strokeLinecap","strokeLinejoin","d","maxSize","allowedTypes","isDragOver","setIsDragOver","useState","preview","setPreview","fileInputRef","useRef","File","url","URL","createObjectURL","revokeObjectURL","handleFileSelect","useCallback","file","validation","validateFile","valid","console","onDragOver","e","preventDefault","onDragLeave","onDrop","_e$dataTransfer$files","dataTransfer","files","onClick","handleClick","current","click","accept","join","_e$target$files","target","src","alt","stopPropagation","XMarkIcon","Math","round","businessTypes","description","businessTypesApi","getBusinessTypes","async","Promise","resolve","setTimeout","handleApiError","getBusinessTypeById","response","apiClient","get","data","Error","onSubmit","onCancel","isLoading","formData","setFormData","email","phone","address","businessType","password","confirmPassword","sendInvite","image","errors","setErrors","setBusinessTypes","loadingBusinessTypes","setLoadingBusinessTypes","useEffect","types","loadBusinessTypes","handleChange","prev","validateUserForm","formValidationRules","validationRules","passwordMatch","newErrors","validateForm","keys","length","submitData","FormField","ImageUpload","undefined","Button","variant","user","showNotification","useNotification","Card","message","window","history","back","orders","onViewOrder","emptyMessage","DetailSection","scope","order","formatDate","orderDate","formatCurrency","totalAmount","StatusBadge","status","size","icon","EyeIcon","userOrders","navigate","useNavigate","DetailList","DetailItem","lastLogin","OrdersSection","ROUTES","getOrderDetailsRoute","users","onViewUser","onEditUser","_onEditUser","onDeleteUser","onUserClick","columns","key","sortable","render","_value","avatar","charAt","EnvelopeIcon","_","getUserEditRoute","PencilIcon","TrashIcon","BaseEntityList","onRowClick","pagination","metrics","metric","index","MetricCard","total","parseFloat","growth","change","userId","_userId","userData","totalOrders","ShoppingCartIcon","totalSpent","CurrencyDollarIcon","averageOrderValue","ClockIcon","chartData","orderHistory","item","date","amount","MetricsSection","ChartSection","BarChart","labels","color","usersApi","getUsers","params","getUserById","createUser","post","updateUser","put","deleteUser","delete","toggleUserStatus","searchUsers","search","query","getUsersByType","uploadUserImage","FormData","append","headers","arguments","initialFetch","apiAdapter","getAll","getById","create","update","baseHook","useEntityData","entityName","updatedUser","entities","forEach","updatedEntities","userIndex","findIndex","fetchUsers","fetchEntities","getEntityById","mapMockUserToUser","mockUser","Date","toISOString","split","getMockUsers","mockUsers","filter","apiService","setEntities","setIsLoading","setError","apiServiceRef","showNotificationRef","entityNameRef","hasInitialFetched","err","log","getIconBackgroundClass","includes","formatValue","toString","iconElement","colorMatch","match","colorClass","toFixed","dateString","defaultOptions","year","month","day","Intl","DateTimeFormat","format","currency","locale","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","_type","statusKey","toLowerCase","CheckCircleIcon","XCircleIcon","TruckIcon","ExclamationCircleIcon","formattedStatus","toUpperCase","slice","DataTable","height","max"],"sourceRoot":""}